// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated and manual changes will be
//     clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"

	"github.com/hashicorp/terraform/helper/schema"
	compute "google.golang.org/api/compute/v1"
)

func resourceComputeZone() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeZoneCreate,
		Read:   resourceComputeZoneRead,
		Update: resourceComputeZoneUpdate,
		Delete: resourceComputeZoneDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeZoneImport,
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"creation_timestamp": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"deprecated": {
				Type:     schema.TypeList,
				Computed: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"deleted": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"deprecated": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"obsolete": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"replacement": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"state": {
							Type:     schema.TypeString,
							Computed: true,
						},
					},
				},
			},
			"description": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"id": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"region": {
				Type:             schema.TypeString,
				Computed:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
			},
			"status": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"project": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
			"self_link": &schema.Schema{
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func resourceComputeZoneCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"name": expandComputeZoneName(d.Get("name")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Zone: %#v", obj)
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating Zone: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := computeOperationWait(config.clientCompute, op, project, "Creating Zone")
	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return waitErr
	}

	return resourceComputeZoneRead(d, meta)
}

func resourceComputeZoneRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{name}}")
	if err != nil {
		return err
	}

	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ComputeZone %q", d.Id()))
	}

	d.Set("creation_timestamp", flattenComputeZoneCreationTimestamp(res["creationTimestamp"]))
	d.Set("deprecated", flattenComputeZoneDeprecated(res["deprecated"]))
	d.Set("description", flattenComputeZoneDescription(res["description"]))
	d.Set("id", flattenComputeZoneId(res["id"]))
	d.Set("name", flattenComputeZoneName(res["name"]))
	d.Set("region", flattenComputeZoneRegion(res["region"]))
	d.Set("status", flattenComputeZoneStatus(res["status"]))
	d.Set("self_link", res["selfLink"])
	d.Set("project", project)

	return nil
}

func resourceComputeZoneUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"name": expandComputeZoneName(d.Get("name")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Zone %q: %#v", d.Id(), obj)
	res, err := sendRequest(config, "PUT", url, obj)

	if err != nil {
		return fmt.Errorf("Error updating Zone %q: %s", d.Id(), err)
	}
	err = Convert(res, &op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, &op, project, "Updating Zone")
	if err != nil {
		return err
	}

	return resourceComputeZoneRead(d, meta)
}

func resourceComputeZoneDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Deleting Zone %q", d.Id())
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting Zone %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Deleting Zone")
	if err != nil {
		return err
	}

	return nil
}

func resourceComputeZoneImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	d.Set("", d.Id())
	return []*schema.ResourceData{d}, nil
}

func flattenComputeZoneCreationTimestamp(v interface{}) interface{} {
	return v
}

func flattenComputeZoneDeprecated(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["deleted"] =
		flattenComputeZoneDeprecatedDeleted(original["deleted"])
	transformed["deprecated"] =
		flattenComputeZoneDeprecatedDeprecated(original["deprecated"])
	transformed["obsolete"] =
		flattenComputeZoneDeprecatedObsolete(original["obsolete"])
	transformed["replacement"] =
		flattenComputeZoneDeprecatedReplacement(original["replacement"])
	transformed["state"] =
		flattenComputeZoneDeprecatedState(original["state"])
	return []interface{}{transformed}
}
func flattenComputeZoneDeprecatedDeleted(v interface{}) interface{} {
	return v
}
func flattenComputeZoneDeprecatedDeprecated(v interface{}) interface{} {
	return v
}
func flattenComputeZoneDeprecatedObsolete(v interface{}) interface{} {
	return v
}
func flattenComputeZoneDeprecatedReplacement(v interface{}) interface{} {
	return v
}
func flattenComputeZoneDeprecatedState(v interface{}) interface{} {
	return v
}

func flattenComputeZoneDescription(v interface{}) interface{} {
	return v
}

func flattenComputeZoneId(v interface{}) interface{} {
	return v
}

func flattenComputeZoneName(v interface{}) interface{} {
	return v
}

func flattenComputeZoneRegion(v interface{}) interface{} {
	return v
}

func flattenComputeZoneStatus(v interface{}) interface{} {
	return v
}

func expandComputeZoneName(v interface{}) interface{} {
	return v
}
