// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by terraform-codegen and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in README.md and
//     CONTRIBUTING.md located at the root of this package.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"

	"github.com/hashicorp/terraform/helper/schema"
	compute "google.golang.org/api/compute/v1"
)

func resourceComputeHttpHealthCheck() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeHttpHealthCheckCreate,
		Read:   resourceComputeHttpHealthCheckRead,
		Update: resourceComputeHttpHealthCheckUpdate,
		Delete: resourceComputeHttpHealthCheckDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeHttpHealthCheckImport,
		},

		Schema: map[string]*schema.Schema{
			"check_interval_sec": {
				Type:     schema.TypeInt,
				Optional: true,
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"healthy_threshold": {
				Type:     schema.TypeInt,
				Optional: true,
			},
			"host": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"name": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"port": {
				Type:     schema.TypeInt,
				Optional: true,
			},
			"request_path": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"timeout_sec": {
				Type:     schema.TypeInt,
				Optional: true,
			},
			"unhealthy_threshold": {
				Type:     schema.TypeInt,
				Optional: true,
			},
			"creation_timestamp": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"id": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"project": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
			"self_link": &schema.Schema{
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func resourceComputeHttpHealthCheckCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"checkIntervalSec":   expandComputeHttpHealthCheckCheckIntervalSec(d.Get("check_interval_sec")),
		"description":        expandComputeHttpHealthCheckDescription(d.Get("description")),
		"healthyThreshold":   expandComputeHttpHealthCheckHealthyThreshold(d.Get("healthy_threshold")),
		"host":               expandComputeHttpHealthCheckHost(d.Get("host")),
		"name":               expandComputeHttpHealthCheckName(d.Get("name")),
		"port":               expandComputeHttpHealthCheckPort(d.Get("port")),
		"requestPath":        expandComputeHttpHealthCheckRequestPath(d.Get("request_path")),
		"timeoutSec":         expandComputeHttpHealthCheckTimeoutSec(d.Get("timeout_sec")),
		"unhealthyThreshold": expandComputeHttpHealthCheckUnhealthyThreshold(d.Get("unhealthy_threshold")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/httpHealthChecks")
	if err != nil {
		return err
	}
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating HttpHealthCheck: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := computeOperationWait(config.clientCompute, op, project, "Creating HttpHealthCheck")
	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return waitErr
	}

	return resourceComputeHttpHealthCheckRead(d, meta)
}

func resourceComputeHttpHealthCheckRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/httpHealthChecks/{{name}}")
	if err != nil {
		return err
	}
	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ComputeHttpHealthCheck %q", d.Id()))
	}

	d.Set("check_interval_sec", flattenComputeHttpHealthCheckCheckIntervalSec(res["checkIntervalSec"]))
	d.Set("creation_timestamp", flattenComputeHttpHealthCheckCreationTimestamp(res["creationTimestamp"]))
	d.Set("description", flattenComputeHttpHealthCheckDescription(res["description"]))
	d.Set("healthy_threshold", flattenComputeHttpHealthCheckHealthyThreshold(res["healthyThreshold"]))
	d.Set("host", flattenComputeHttpHealthCheckHost(res["host"]))
	d.Set("id", flattenComputeHttpHealthCheckId(res["id"]))
	d.Set("name", flattenComputeHttpHealthCheckName(res["name"]))
	d.Set("port", flattenComputeHttpHealthCheckPort(res["port"]))
	d.Set("request_path", flattenComputeHttpHealthCheckRequestPath(res["requestPath"]))
	d.Set("timeout_sec", flattenComputeHttpHealthCheckTimeoutSec(res["timeoutSec"]))
	d.Set("unhealthy_threshold", flattenComputeHttpHealthCheckUnhealthyThreshold(res["unhealthyThreshold"]))
	d.Set("self_link", res["selfLink"])
	d.Set("project", project)

	return nil
}

func resourceComputeHttpHealthCheckUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"checkIntervalSec":   expandComputeHttpHealthCheckCheckIntervalSec(d.Get("check_interval_sec")),
		"description":        expandComputeHttpHealthCheckDescription(d.Get("description")),
		"healthyThreshold":   expandComputeHttpHealthCheckHealthyThreshold(d.Get("healthy_threshold")),
		"host":               expandComputeHttpHealthCheckHost(d.Get("host")),
		"name":               expandComputeHttpHealthCheckName(d.Get("name")),
		"port":               expandComputeHttpHealthCheckPort(d.Get("port")),
		"requestPath":        expandComputeHttpHealthCheckRequestPath(d.Get("request_path")),
		"timeoutSec":         expandComputeHttpHealthCheckTimeoutSec(d.Get("timeout_sec")),
		"unhealthyThreshold": expandComputeHttpHealthCheckUnhealthyThreshold(d.Get("unhealthy_threshold")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/httpHealthChecks/{{name}}")
	if err != nil {
		return err
	}
	res, err := Put(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error updating HttpHealthCheck %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Updating HttpHealthCheck")
	if err != nil {
		return err
	}

	return resourceComputeHttpHealthCheckRead(d, meta)
}

func resourceComputeHttpHealthCheckDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/httpHealthChecks/{{name}}")
	if err != nil {
		return err
	}
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting HttpHealthCheck %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Updating HttpHealthCheck")
	if err != nil {
		return err
	}

	return nil
}

func resourceComputeHttpHealthCheckImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	d.Set("", d.Id())
	return []*schema.ResourceData{d}, nil
}

func flattenComputeHttpHealthCheckCheckIntervalSec(v interface{}) interface{} {
	return v
}

func flattenComputeHttpHealthCheckCreationTimestamp(v interface{}) interface{} {
	return v
}

func flattenComputeHttpHealthCheckDescription(v interface{}) interface{} {
	return v
}

func flattenComputeHttpHealthCheckHealthyThreshold(v interface{}) interface{} {
	return v
}

func flattenComputeHttpHealthCheckHost(v interface{}) interface{} {
	return v
}

func flattenComputeHttpHealthCheckId(v interface{}) interface{} {
	return v
}

func flattenComputeHttpHealthCheckName(v interface{}) interface{} {
	return v
}

func flattenComputeHttpHealthCheckPort(v interface{}) interface{} {
	return v
}

func flattenComputeHttpHealthCheckRequestPath(v interface{}) interface{} {
	return v
}

func flattenComputeHttpHealthCheckTimeoutSec(v interface{}) interface{} {
	return v
}

func flattenComputeHttpHealthCheckUnhealthyThreshold(v interface{}) interface{} {
	return v
}

func expandComputeHttpHealthCheckCheckIntervalSec(v interface{}) interface{} {
	return v
}

func expandComputeHttpHealthCheckDescription(v interface{}) interface{} {
	return v
}

func expandComputeHttpHealthCheckHealthyThreshold(v interface{}) interface{} {
	return v
}

func expandComputeHttpHealthCheckHost(v interface{}) interface{} {
	return v
}

func expandComputeHttpHealthCheckName(v interface{}) interface{} {
	return v
}

func expandComputeHttpHealthCheckPort(v interface{}) interface{} {
	return v
}

func expandComputeHttpHealthCheckRequestPath(v interface{}) interface{} {
	return v
}

func expandComputeHttpHealthCheckTimeoutSec(v interface{}) interface{} {
	return v
}

func expandComputeHttpHealthCheckUnhealthyThreshold(v interface{}) interface{} {
	return v
}
