// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by terraform-codegen and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in README.md and
//     CONTRIBUTING.md located at the root of this package.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"

	"github.com/hashicorp/terraform/helper/schema"
	compute "google.golang.org/api/compute/v1"
)

func resourceComputeFirewall() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeFirewallCreate,
		Read:   resourceComputeFirewallRead,
		Update: resourceComputeFirewallUpdate,
		Delete: resourceComputeFirewallDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeFirewallImport,
		},

		Schema: map[string]*schema.Schema{
			"allowed": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"ip_protocol": {
							Type:     schema.TypeString,
							Required: true,
						},
						"ports": {
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"name": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"network": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"source_ranges": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"source_tags": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"target_tags": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"creation_timestamp": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"id": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"project": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
	}
}

func resourceComputeFirewallCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"allowed":      expandComputeFirewallAllowed(d.Get("allowed")),
		"description":  expandComputeFirewallDescription(d.Get("description")),
		"name":         expandComputeFirewallName(d.Get("name")),
		"network":      expandComputeFirewallNetwork(d.Get("network")),
		"sourceRanges": expandComputeFirewallSourceRanges(d.Get("source_ranges")),
		"sourceTags":   expandComputeFirewallSourceTags(d.Get("source_tags")),
		"targetTags":   expandComputeFirewallTargetTags(d.Get("target_tags")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/firewalls")
	if err != nil {
		return err
	}
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating Firewall: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := computeOperationWait(config.clientCompute, op, project, "Creating Firewall")
	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return waitErr
	}

	return resourceComputeFirewallRead(d, meta)
}

func resourceComputeFirewallRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/firewalls/{{name}}")
	if err != nil {
		return err
	}
	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ComputeFirewall %q", d.Id()))
	}

	d.Set("allowed", flattenComputeFirewallAllowed(res["allowed"]))
	d.Set("creation_timestamp", flattenComputeFirewallCreationTimestamp(res["creationTimestamp"]))
	d.Set("description", flattenComputeFirewallDescription(res["description"]))
	d.Set("id", flattenComputeFirewallId(res["id"]))
	d.Set("name", flattenComputeFirewallName(res["name"]))
	d.Set("network", flattenComputeFirewallNetwork(res["network"]))
	d.Set("source_ranges", flattenComputeFirewallSourceRanges(res["sourceRanges"]))
	d.Set("source_tags", flattenComputeFirewallSourceTags(res["sourceTags"]))
	d.Set("target_tags", flattenComputeFirewallTargetTags(res["targetTags"]))
	d.Set("self_link", res["selfLink"])
	d.Set("project", project)

	return nil
}

func resourceComputeFirewallUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"allowed":      expandComputeFirewallAllowed(d.Get("allowed")),
		"description":  expandComputeFirewallDescription(d.Get("description")),
		"name":         expandComputeFirewallName(d.Get("name")),
		"network":      expandComputeFirewallNetwork(d.Get("network")),
		"sourceRanges": expandComputeFirewallSourceRanges(d.Get("source_ranges")),
		"sourceTags":   expandComputeFirewallSourceTags(d.Get("source_tags")),
		"targetTags":   expandComputeFirewallTargetTags(d.Get("target_tags")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/firewalls/{{name}}")
	if err != nil {
		return err
	}
	res, err := Put(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error updating Firewall %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Updating Firewall")
	if err != nil {
		return err
	}

	return resourceComputeFirewallRead(d, meta)
}

func resourceComputeFirewallDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/firewalls/{{name}}")
	if err != nil {
		return err
	}
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting Firewall %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Updating Firewall")
	if err != nil {
		return err
	}

	return nil
}

func resourceComputeFirewallImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	d.Set("", d.Id())
	return []*schema.ResourceData{d}, nil
}

func flattenComputeFirewallAllowed(v interface{}) interface{} {
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"ip_protocol": flattenComputeFirewallAllowedIp_protocol(original["ip_protocol"]),
			"ports":       flattenComputeFirewallAllowedPorts(original["ports"]),
		})
	}
	return transformed
}
func flattenComputeFirewallAllowedIp_protocol(v interface{}) interface{} {
	return v
}
func flattenComputeFirewallAllowedPorts(v interface{}) interface{} {
	return v
}

func flattenComputeFirewallCreationTimestamp(v interface{}) interface{} {
	return v
}

func flattenComputeFirewallDescription(v interface{}) interface{} {
	return v
}

func flattenComputeFirewallId(v interface{}) interface{} {
	return v
}

func flattenComputeFirewallName(v interface{}) interface{} {
	return v
}

func flattenComputeFirewallNetwork(v interface{}) interface{} {
	return v
}

func flattenComputeFirewallSourceRanges(v interface{}) interface{} {
	return v
}

func flattenComputeFirewallSourceTags(v interface{}) interface{} {
	return v
}

func flattenComputeFirewallTargetTags(v interface{}) interface{} {
	return v
}

func expandComputeFirewallAllowed(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["ip_protocol"] =
			expandComputeFirewallAllowedIp_protocol(original["ip_protocol"])
		transformed["ports"] =
			expandComputeFirewallAllowedPorts(original["ports"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeFirewallAllowedIp_protocol(v interface{}) interface{} {
	return v
}
func expandComputeFirewallAllowedPorts(v interface{}) interface{} {
	return v
}

func expandComputeFirewallDescription(v interface{}) interface{} {
	return v
}

func expandComputeFirewallName(v interface{}) interface{} {
	return v
}

func expandComputeFirewallNetwork(v interface{}) interface{} {
	return v
}

func expandComputeFirewallSourceRanges(v interface{}) interface{} {
	return v
}

func expandComputeFirewallSourceTags(v interface{}) interface{} {
	return v
}

func expandComputeFirewallTargetTags(v interface{}) interface{} {
	return v
}
