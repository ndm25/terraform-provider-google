// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated and manual changes will be
//     clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"

	"github.com/hashicorp/terraform/helper/schema"
	compute "google.golang.org/api/compute/v1"
)

func resourceComputeInstanceTemplate() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeInstanceTemplateCreate,
		Read:   resourceComputeInstanceTemplateRead,
		Update: resourceComputeInstanceTemplateUpdate,
		Delete: resourceComputeInstanceTemplateDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeInstanceTemplateImport,
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type:     schema.TypeString,
				Required: true,
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"properties": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"machine_type": {
							Type:             schema.TypeString,
							Required:         true,
							DiffSuppressFunc: compareSelfLinkOrResourceName,
						},
						"can_ip_forward": {
							Type:     schema.TypeBool,
							Optional: true,
						},
						"description": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"disks": {
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"initialize_params": {
										Type:     schema.TypeList,
										Required: true,
										ForceNew: true,
										MaxItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"disk_name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"disk_size_gb": {
													Type:     schema.TypeInt,
													Optional: true,
												},
												"disk_type": {
													Type:             schema.TypeString,
													Optional:         true,
													DiffSuppressFunc: compareSelfLinkOrResourceName,
												},
												"source_image": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"source_image_encryption_key": {
													Type:     schema.TypeList,
													Optional: true,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"raw_key": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"sha256": {
																Type:     schema.TypeString,
																Computed: true,
															},
														},
													},
												},
											},
										},
									},
									"auto_delete": {
										Type:     schema.TypeBool,
										Optional: true,
									},
									"boot": {
										Type:     schema.TypeBool,
										Optional: true,
									},
									"device_name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"disk_encryption_key": {
										Type:     schema.TypeList,
										Optional: true,
										MaxItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"raw_key": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"rsa_encrypted_key": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"sha256": {
													Type:     schema.TypeString,
													Computed: true,
												},
											},
										},
									},
									"index": {
										Type:     schema.TypeInt,
										Optional: true,
									},
									"interface": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"mode": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"source": {
										Type:             schema.TypeString,
										Optional:         true,
										DiffSuppressFunc: compareSelfLinkOrResourceName,
									},
									"type": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
						// TODO: Property 'metadata' of type Api::Type::NameValues is not supported
						"guest_accelerators": {
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"accelerator_count": {
										Type:     schema.TypeInt,
										Optional: true,
									},
									"accelerator_type": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
						"network_interfaces": {
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"access_configs": {
										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"name": {
													Type:     schema.TypeString,
													Required: true,
												},
												"nat_ip": {
													Type:             schema.TypeString,
													Required:         true,
													DiffSuppressFunc: compareSelfLinkOrResourceName,
												},
												"type": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},
									"alias_ip_ranges": {
										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"ip_cidr_range": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"subnetwork_range_name": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
									"network": {
										Type:             schema.TypeString,
										Optional:         true,
										DiffSuppressFunc: compareSelfLinkOrResourceName,
									},
									"network_ip": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"subnetwork": {
										Type:             schema.TypeString,
										Optional:         true,
										DiffSuppressFunc: compareSelfLinkOrResourceName,
									},
									"name": {
										Type:     schema.TypeString,
										Computed: true,
									},
								},
							},
						},
						"scheduling": {
							Type:     schema.TypeList,
							Optional: true,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"automatic_restart": {
										Type:     schema.TypeBool,
										Optional: true,
									},
									"on_host_maintenance": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"preemptible": {
										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},
						"service_accounts": {
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"email": {
										Type:     schema.TypeBool,
										Optional: true,
									},
									"scopes": {
										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
						"tags": {
							Type:     schema.TypeList,
							Optional: true,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"fingerprint": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"items": {
										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
					},
				},
			},
			"creation_timestamp": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"id": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"project": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
			"self_link": &schema.Schema{
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func resourceComputeInstanceTemplateCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"description": expandComputeInstanceTemplateDescription(d.Get("description")),
		"name":        expandComputeInstanceTemplateName(d.Get("name")),
		"properties":  expandComputeInstanceTemplateProperties(d.Get("properties")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/instanceTemplates")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new InstanceTemplate: %#v", obj)
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating InstanceTemplate: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := computeOperationWait(config.clientCompute, op, project, "Creating InstanceTemplate")
	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return waitErr
	}

	return resourceComputeInstanceTemplateRead(d, meta)
}

func resourceComputeInstanceTemplateRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/instanceTemplates/{{name}}")
	if err != nil {
		return err
	}

	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ComputeInstanceTemplate %q", d.Id()))
	}

	d.Set("creation_timestamp", flattenComputeInstanceTemplateCreationTimestamp(res["creationTimestamp"]))
	d.Set("description", flattenComputeInstanceTemplateDescription(res["description"]))
	d.Set("id", flattenComputeInstanceTemplateId(res["id"]))
	d.Set("name", flattenComputeInstanceTemplateName(res["name"]))
	d.Set("properties", flattenComputeInstanceTemplateProperties(res["properties"]))
	d.Set("self_link", res["selfLink"])
	d.Set("project", project)

	return nil
}

func resourceComputeInstanceTemplateUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"description": expandComputeInstanceTemplateDescription(d.Get("description")),
		"name":        expandComputeInstanceTemplateName(d.Get("name")),
		"properties":  expandComputeInstanceTemplateProperties(d.Get("properties")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/instanceTemplates/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating InstanceTemplate %q: %#v", d.Id(), obj)
	res, err := sendRequest(config, "PUT", url, obj)

	if err != nil {
		return fmt.Errorf("Error updating InstanceTemplate %q: %s", d.Id(), err)
	}
	err = Convert(res, &op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, &op, project, "Updating InstanceTemplate")
	if err != nil {
		return err
	}

	return resourceComputeInstanceTemplateRead(d, meta)
}

func resourceComputeInstanceTemplateDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/instanceTemplates/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Deleting InstanceTemplate %q", d.Id())
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting InstanceTemplate %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Deleting InstanceTemplate")
	if err != nil {
		return err
	}

	return nil
}

func resourceComputeInstanceTemplateImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	d.Set("", d.Id())
	return []*schema.ResourceData{d}, nil
}

func flattenComputeInstanceTemplateCreationTimestamp(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceTemplateDescription(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceTemplateId(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceTemplateName(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceTemplateProperties(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["can_ip_forward"] =
		flattenComputeInstanceTemplatePropertiesCanIpForward(original["canIpForward"])
	transformed["description"] =
		flattenComputeInstanceTemplatePropertiesDescription(original["description"])
	transformed["disks"] =
		flattenComputeInstanceTemplatePropertiesDisks(original["disks"])
	transformed["machine_type"] =
		flattenComputeInstanceTemplatePropertiesMachineType(original["machineType"])
	transformed["metadata"] =
		flattenComputeInstanceTemplatePropertiesMetadata(original["metadata"])
	transformed["guest_accelerators"] =
		flattenComputeInstanceTemplatePropertiesGuestAccelerators(original["guestAccelerators"])
	transformed["network_interfaces"] =
		flattenComputeInstanceTemplatePropertiesNetworkInterfaces(original["networkInterfaces"])
	transformed["scheduling"] =
		flattenComputeInstanceTemplatePropertiesScheduling(original["scheduling"])
	transformed["service_accounts"] =
		flattenComputeInstanceTemplatePropertiesServiceAccounts(original["serviceAccounts"])
	transformed["tags"] =
		flattenComputeInstanceTemplatePropertiesTags(original["tags"])
	return []interface{}{transformed}
}
func flattenComputeInstanceTemplatePropertiesCanIpForward(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesDescription(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesDisks(v interface{}) interface{} {
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"auto_delete":         flattenComputeInstanceTemplatePropertiesDisksAutoDelete(original["autoDelete"]),
			"boot":                flattenComputeInstanceTemplatePropertiesDisksBoot(original["boot"]),
			"device_name":         flattenComputeInstanceTemplatePropertiesDisksDeviceName(original["deviceName"]),
			"disk_encryption_key": flattenComputeInstanceTemplatePropertiesDisksDiskEncryptionKey(original["diskEncryptionKey"]),
			"index":               flattenComputeInstanceTemplatePropertiesDisksIndex(original["index"]),
			"initialize_params":   flattenComputeInstanceTemplatePropertiesDisksInitializeParams(original["initializeParams"]),
			"interface":           flattenComputeInstanceTemplatePropertiesDisksInterface(original["interface"]),
			"mode":                flattenComputeInstanceTemplatePropertiesDisksMode(original["mode"]),
			"source":              flattenComputeInstanceTemplatePropertiesDisksSource(original["source"]),
			"type":                flattenComputeInstanceTemplatePropertiesDisksType(original["type"]),
		})
	}
	return transformed
}
func flattenComputeInstanceTemplatePropertiesDisksAutoDelete(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesDisksBoot(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesDisksDeviceName(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesDisksDiskEncryptionKey(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["raw_key"] =
		flattenComputeInstanceTemplatePropertiesDisksDiskEncryptionKeyRawKey(original["rawKey"])
	transformed["rsa_encrypted_key"] =
		flattenComputeInstanceTemplatePropertiesDisksDiskEncryptionKeyRsaEncryptedKey(original["rsaEncryptedKey"])
	transformed["sha256"] =
		flattenComputeInstanceTemplatePropertiesDisksDiskEncryptionKeySha256(original["sha256"])
	return []interface{}{transformed}
}
func flattenComputeInstanceTemplatePropertiesDisksDiskEncryptionKeyRawKey(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesDisksDiskEncryptionKeyRsaEncryptedKey(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesDisksDiskEncryptionKeySha256(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceTemplatePropertiesDisksIndex(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesDisksInitializeParams(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["disk_name"] =
		flattenComputeInstanceTemplatePropertiesDisksInitializeParamsDiskName(original["diskName"])
	transformed["disk_size_gb"] =
		flattenComputeInstanceTemplatePropertiesDisksInitializeParamsDiskSizeGb(original["diskSizeGb"])
	transformed["disk_type"] =
		flattenComputeInstanceTemplatePropertiesDisksInitializeParamsDiskType(original["diskType"])
	transformed["source_image"] =
		flattenComputeInstanceTemplatePropertiesDisksInitializeParamsSourceImage(original["sourceImage"])
	transformed["source_image_encryption_key"] =
		flattenComputeInstanceTemplatePropertiesDisksInitializeParamsSourceImageEncryptionKey(original["sourceImageEncryptionKey"])
	return []interface{}{transformed}
}
func flattenComputeInstanceTemplatePropertiesDisksInitializeParamsDiskName(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesDisksInitializeParamsDiskSizeGb(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesDisksInitializeParamsDiskType(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesDisksInitializeParamsSourceImage(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesDisksInitializeParamsSourceImageEncryptionKey(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["raw_key"] =
		flattenComputeInstanceTemplatePropertiesDisksInitializeParamsSourceImageEncryptionKeyRawKey(original["rawKey"])
	transformed["sha256"] =
		flattenComputeInstanceTemplatePropertiesDisksInitializeParamsSourceImageEncryptionKeySha256(original["sha256"])
	return []interface{}{transformed}
}
func flattenComputeInstanceTemplatePropertiesDisksInitializeParamsSourceImageEncryptionKeyRawKey(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesDisksInitializeParamsSourceImageEncryptionKeySha256(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceTemplatePropertiesDisksInterface(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesDisksMode(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesDisksSource(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesDisksType(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceTemplatePropertiesMachineType(v interface{}) interface{} {
	return v
}

// TODO: Property 'metadata' of type Api::Type::NameValues is not supported
func flattenComputeInstanceTemplatePropertiesGuestAccelerators(v interface{}) interface{} {
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"accelerator_count": flattenComputeInstanceTemplatePropertiesGuestAcceleratorsAcceleratorCount(original["acceleratorCount"]),
			"accelerator_type":  flattenComputeInstanceTemplatePropertiesGuestAcceleratorsAcceleratorType(original["acceleratorType"]),
		})
	}
	return transformed
}
func flattenComputeInstanceTemplatePropertiesGuestAcceleratorsAcceleratorCount(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesGuestAcceleratorsAcceleratorType(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceTemplatePropertiesNetworkInterfaces(v interface{}) interface{} {
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"access_configs":  flattenComputeInstanceTemplatePropertiesNetworkInterfacesAccessConfigs(original["accessConfigs"]),
			"alias_ip_ranges": flattenComputeInstanceTemplatePropertiesNetworkInterfacesAliasIpRanges(original["aliasIpRanges"]),
			"name":            flattenComputeInstanceTemplatePropertiesNetworkInterfacesName(original["name"]),
			"network":         flattenComputeInstanceTemplatePropertiesNetworkInterfacesNetwork(original["network"]),
			"network_ip":      flattenComputeInstanceTemplatePropertiesNetworkInterfacesNetworkIP(original["networkIP"]),
			"subnetwork":      flattenComputeInstanceTemplatePropertiesNetworkInterfacesSubnetwork(original["subnetwork"]),
		})
	}
	return transformed
}
func flattenComputeInstanceTemplatePropertiesNetworkInterfacesAccessConfigs(v interface{}) interface{} {
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"name":   flattenComputeInstanceTemplatePropertiesNetworkInterfacesAccessConfigsName(original["name"]),
			"nat_ip": flattenComputeInstanceTemplatePropertiesNetworkInterfacesAccessConfigsNatIP(original["natIP"]),
			"type":   flattenComputeInstanceTemplatePropertiesNetworkInterfacesAccessConfigsType(original["type"]),
		})
	}
	return transformed
}
func flattenComputeInstanceTemplatePropertiesNetworkInterfacesAccessConfigsName(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesNetworkInterfacesAccessConfigsNatIP(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesNetworkInterfacesAccessConfigsType(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceTemplatePropertiesNetworkInterfacesAliasIpRanges(v interface{}) interface{} {
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"ip_cidr_range":         flattenComputeInstanceTemplatePropertiesNetworkInterfacesAliasIpRangesIpCidrRange(original["ipCidrRange"]),
			"subnetwork_range_name": flattenComputeInstanceTemplatePropertiesNetworkInterfacesAliasIpRangesSubnetworkRangeName(original["subnetworkRangeName"]),
		})
	}
	return transformed
}
func flattenComputeInstanceTemplatePropertiesNetworkInterfacesAliasIpRangesIpCidrRange(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesNetworkInterfacesAliasIpRangesSubnetworkRangeName(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceTemplatePropertiesNetworkInterfacesName(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesNetworkInterfacesNetwork(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesNetworkInterfacesNetworkIP(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesNetworkInterfacesSubnetwork(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceTemplatePropertiesScheduling(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["automatic_restart"] =
		flattenComputeInstanceTemplatePropertiesSchedulingAutomaticRestart(original["automaticRestart"])
	transformed["on_host_maintenance"] =
		flattenComputeInstanceTemplatePropertiesSchedulingOnHostMaintenance(original["onHostMaintenance"])
	transformed["preemptible"] =
		flattenComputeInstanceTemplatePropertiesSchedulingPreemptible(original["preemptible"])
	return []interface{}{transformed}
}
func flattenComputeInstanceTemplatePropertiesSchedulingAutomaticRestart(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesSchedulingOnHostMaintenance(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesSchedulingPreemptible(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceTemplatePropertiesServiceAccounts(v interface{}) interface{} {
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"email":  flattenComputeInstanceTemplatePropertiesServiceAccountsEmail(original["email"]),
			"scopes": flattenComputeInstanceTemplatePropertiesServiceAccountsScopes(original["scopes"]),
		})
	}
	return transformed
}
func flattenComputeInstanceTemplatePropertiesServiceAccountsEmail(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesServiceAccountsScopes(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceTemplatePropertiesTags(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["fingerprint"] =
		flattenComputeInstanceTemplatePropertiesTagsFingerprint(original["fingerprint"])
	transformed["items"] =
		flattenComputeInstanceTemplatePropertiesTagsItems(original["items"])
	return []interface{}{transformed}
}
func flattenComputeInstanceTemplatePropertiesTagsFingerprint(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTemplatePropertiesTagsItems(v interface{}) interface{} {
	return v
}

func expandComputeInstanceTemplateDescription(v interface{}) interface{} {
	return v
}

func expandComputeInstanceTemplateName(v interface{}) interface{} {
	return v
}

func expandComputeInstanceTemplateProperties(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["canIpForward"] =
			expandComputeInstanceTemplatePropertiesCanIpForward(original["can_ip_forward"])
		transformed["description"] =
			expandComputeInstanceTemplatePropertiesDescription(original["description"])
		transformed["disks"] =
			expandComputeInstanceTemplatePropertiesDisks(original["disks"])
		transformed["machineType"] =
			expandComputeInstanceTemplatePropertiesMachineType(original["machine_type"])
		transformed["metadata"] =
			expandComputeInstanceTemplatePropertiesMetadata(original["metadata"])
		transformed["guestAccelerators"] =
			expandComputeInstanceTemplatePropertiesGuestAccelerators(original["guest_accelerators"])
		transformed["networkInterfaces"] =
			expandComputeInstanceTemplatePropertiesNetworkInterfaces(original["network_interfaces"])
		transformed["scheduling"] =
			expandComputeInstanceTemplatePropertiesScheduling(original["scheduling"])
		transformed["serviceAccounts"] =
			expandComputeInstanceTemplatePropertiesServiceAccounts(original["service_accounts"])
		transformed["tags"] =
			expandComputeInstanceTemplatePropertiesTags(original["tags"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceTemplatePropertiesCanIpForward(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesDescription(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesDisks(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["autoDelete"] =
			expandComputeInstanceTemplatePropertiesDisksAutoDelete(original["auto_delete"])
		transformed["boot"] =
			expandComputeInstanceTemplatePropertiesDisksBoot(original["boot"])
		transformed["deviceName"] =
			expandComputeInstanceTemplatePropertiesDisksDeviceName(original["device_name"])
		transformed["diskEncryptionKey"] =
			expandComputeInstanceTemplatePropertiesDisksDiskEncryptionKey(original["disk_encryption_key"])
		transformed["index"] =
			expandComputeInstanceTemplatePropertiesDisksIndex(original["index"])
		transformed["initializeParams"] =
			expandComputeInstanceTemplatePropertiesDisksInitializeParams(original["initialize_params"])
		transformed["interface"] =
			expandComputeInstanceTemplatePropertiesDisksInterface(original["interface"])
		transformed["mode"] =
			expandComputeInstanceTemplatePropertiesDisksMode(original["mode"])
		transformed["source"] =
			expandComputeInstanceTemplatePropertiesDisksSource(original["source"])
		transformed["type"] =
			expandComputeInstanceTemplatePropertiesDisksType(original["type"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceTemplatePropertiesDisksAutoDelete(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesDisksBoot(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesDisksDeviceName(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesDisksDiskEncryptionKey(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["rawKey"] =
			expandComputeInstanceTemplatePropertiesDisksDiskEncryptionKeyRawKey(original["raw_key"])
		transformed["rsaEncryptedKey"] =
			expandComputeInstanceTemplatePropertiesDisksDiskEncryptionKeyRsaEncryptedKey(original["rsa_encrypted_key"])
		transformed["sha256"] =
			expandComputeInstanceTemplatePropertiesDisksDiskEncryptionKeySha256(original["sha256"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceTemplatePropertiesDisksDiskEncryptionKeyRawKey(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesDisksDiskEncryptionKeyRsaEncryptedKey(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesDisksDiskEncryptionKeySha256(v interface{}) interface{} {
	return v
}

func expandComputeInstanceTemplatePropertiesDisksIndex(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesDisksInitializeParams(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["diskName"] =
			expandComputeInstanceTemplatePropertiesDisksInitializeParamsDiskName(original["disk_name"])
		transformed["diskSizeGb"] =
			expandComputeInstanceTemplatePropertiesDisksInitializeParamsDiskSizeGb(original["disk_size_gb"])
		transformed["diskType"] =
			expandComputeInstanceTemplatePropertiesDisksInitializeParamsDiskType(original["disk_type"])
		transformed["sourceImage"] =
			expandComputeInstanceTemplatePropertiesDisksInitializeParamsSourceImage(original["source_image"])
		transformed["sourceImageEncryptionKey"] =
			expandComputeInstanceTemplatePropertiesDisksInitializeParamsSourceImageEncryptionKey(original["source_image_encryption_key"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceTemplatePropertiesDisksInitializeParamsDiskName(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesDisksInitializeParamsDiskSizeGb(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesDisksInitializeParamsDiskType(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesDisksInitializeParamsSourceImage(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesDisksInitializeParamsSourceImageEncryptionKey(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["rawKey"] =
			expandComputeInstanceTemplatePropertiesDisksInitializeParamsSourceImageEncryptionKeyRawKey(original["raw_key"])
		transformed["sha256"] =
			expandComputeInstanceTemplatePropertiesDisksInitializeParamsSourceImageEncryptionKeySha256(original["sha256"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceTemplatePropertiesDisksInitializeParamsSourceImageEncryptionKeyRawKey(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesDisksInitializeParamsSourceImageEncryptionKeySha256(v interface{}) interface{} {
	return v
}

func expandComputeInstanceTemplatePropertiesDisksInterface(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesDisksMode(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesDisksSource(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesDisksType(v interface{}) interface{} {
	return v
}

func expandComputeInstanceTemplatePropertiesMachineType(v interface{}) interface{} {
	return v
}

// TODO: Property 'metadata' of type Api::Type::NameValues is not supported
func expandComputeInstanceTemplatePropertiesGuestAccelerators(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["acceleratorCount"] =
			expandComputeInstanceTemplatePropertiesGuestAcceleratorsAcceleratorCount(original["accelerator_count"])
		transformed["acceleratorType"] =
			expandComputeInstanceTemplatePropertiesGuestAcceleratorsAcceleratorType(original["accelerator_type"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceTemplatePropertiesGuestAcceleratorsAcceleratorCount(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesGuestAcceleratorsAcceleratorType(v interface{}) interface{} {
	return v
}

func expandComputeInstanceTemplatePropertiesNetworkInterfaces(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["accessConfigs"] =
			expandComputeInstanceTemplatePropertiesNetworkInterfacesAccessConfigs(original["access_configs"])
		transformed["aliasIpRanges"] =
			expandComputeInstanceTemplatePropertiesNetworkInterfacesAliasIpRanges(original["alias_ip_ranges"])
		transformed["name"] =
			expandComputeInstanceTemplatePropertiesNetworkInterfacesName(original["name"])
		transformed["network"] =
			expandComputeInstanceTemplatePropertiesNetworkInterfacesNetwork(original["network"])
		transformed["networkIP"] =
			expandComputeInstanceTemplatePropertiesNetworkInterfacesNetworkIP(original["network_ip"])
		transformed["subnetwork"] =
			expandComputeInstanceTemplatePropertiesNetworkInterfacesSubnetwork(original["subnetwork"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceTemplatePropertiesNetworkInterfacesAccessConfigs(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["name"] =
			expandComputeInstanceTemplatePropertiesNetworkInterfacesAccessConfigsName(original["name"])
		transformed["natIP"] =
			expandComputeInstanceTemplatePropertiesNetworkInterfacesAccessConfigsNatIP(original["nat_ip"])
		transformed["type"] =
			expandComputeInstanceTemplatePropertiesNetworkInterfacesAccessConfigsType(original["type"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceTemplatePropertiesNetworkInterfacesAccessConfigsName(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesNetworkInterfacesAccessConfigsNatIP(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesNetworkInterfacesAccessConfigsType(v interface{}) interface{} {
	return v
}

func expandComputeInstanceTemplatePropertiesNetworkInterfacesAliasIpRanges(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["ipCidrRange"] =
			expandComputeInstanceTemplatePropertiesNetworkInterfacesAliasIpRangesIpCidrRange(original["ip_cidr_range"])
		transformed["subnetworkRangeName"] =
			expandComputeInstanceTemplatePropertiesNetworkInterfacesAliasIpRangesSubnetworkRangeName(original["subnetwork_range_name"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceTemplatePropertiesNetworkInterfacesAliasIpRangesIpCidrRange(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesNetworkInterfacesAliasIpRangesSubnetworkRangeName(v interface{}) interface{} {
	return v
}

func expandComputeInstanceTemplatePropertiesNetworkInterfacesName(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesNetworkInterfacesNetwork(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesNetworkInterfacesNetworkIP(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesNetworkInterfacesSubnetwork(v interface{}) interface{} {
	return v
}

func expandComputeInstanceTemplatePropertiesScheduling(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["automaticRestart"] =
			expandComputeInstanceTemplatePropertiesSchedulingAutomaticRestart(original["automatic_restart"])
		transformed["onHostMaintenance"] =
			expandComputeInstanceTemplatePropertiesSchedulingOnHostMaintenance(original["on_host_maintenance"])
		transformed["preemptible"] =
			expandComputeInstanceTemplatePropertiesSchedulingPreemptible(original["preemptible"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceTemplatePropertiesSchedulingAutomaticRestart(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesSchedulingOnHostMaintenance(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesSchedulingPreemptible(v interface{}) interface{} {
	return v
}

func expandComputeInstanceTemplatePropertiesServiceAccounts(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["email"] =
			expandComputeInstanceTemplatePropertiesServiceAccountsEmail(original["email"])
		transformed["scopes"] =
			expandComputeInstanceTemplatePropertiesServiceAccountsScopes(original["scopes"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceTemplatePropertiesServiceAccountsEmail(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesServiceAccountsScopes(v interface{}) interface{} {
	return v
}

func expandComputeInstanceTemplatePropertiesTags(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["fingerprint"] =
			expandComputeInstanceTemplatePropertiesTagsFingerprint(original["fingerprint"])
		transformed["items"] =
			expandComputeInstanceTemplatePropertiesTagsItems(original["items"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceTemplatePropertiesTagsFingerprint(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTemplatePropertiesTagsItems(v interface{}) interface{} {
	return v
}
