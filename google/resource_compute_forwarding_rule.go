// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by terraform-codegen and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in README.md and
//     CONTRIBUTING.md located at the root of this package.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"

	"github.com/hashicorp/terraform/helper/schema"
	compute "google.golang.org/api/compute/v1"
)

func resourceComputeForwardingRule() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeForwardingRuleCreate,
		Read:   resourceComputeForwardingRuleRead,
		Update: resourceComputeForwardingRuleUpdate,
		Delete: resourceComputeForwardingRuleDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeForwardingRuleImport,
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type:     schema.TypeString,
				Required: true,
			},
			"region": {
				Type:             schema.TypeString,
				Required:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"ip_address": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"ip_protocol": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"backend_service": {
				Type:             schema.TypeString,
				Optional:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
			},
			"ip_version": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"load_balancing_scheme": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"network": {
				Type:             schema.TypeString,
				Optional:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
			},
			"port_range": {
				Type:             schema.TypeString,
				Optional:         true,
				DiffSuppressFunc: portRangeDiffSuppress,
			},
			"ports": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"subnetwork": {
				Type:             schema.TypeString,
				Optional:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
			},
			"target": {
				Type:             schema.TypeString,
				Optional:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
			},
			"creation_timestamp": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"project": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
	}
}

func resourceComputeForwardingRuleCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"description":         expandComputeForwardingRuleDescription(d.Get("description")),
		"IPAddress":           expandComputeForwardingRuleIPAddress(d.Get("ip_address")),
		"IPProtocol":          expandComputeForwardingRuleIPProtocol(d.Get("ip_protocol")),
		"backendService":      expandComputeForwardingRuleBackendService(d.Get("backend_service")),
		"ipVersion":           expandComputeForwardingRuleIpVersion(d.Get("ip_version")),
		"loadBalancingScheme": expandComputeForwardingRuleLoadBalancingScheme(d.Get("load_balancing_scheme")),
		"name":                expandComputeForwardingRuleName(d.Get("name")),
		"network":             expandComputeForwardingRuleNetwork(d.Get("network")),
		"portRange":           expandComputeForwardingRulePortRange(d.Get("port_range")),
		"ports":               expandComputeForwardingRulePorts(d.Get("ports")),
		"subnetwork":          expandComputeForwardingRuleSubnetwork(d.Get("subnetwork")),
		"target":              expandComputeForwardingRuleTarget(d.Get("target")),
		"region":              expandComputeForwardingRuleRegion(d.Get("region")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/regions/{{region}}/forwardingRules")
	if err != nil {
		return err
	}
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating ForwardingRule: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := computeOperationWait(config.clientCompute, op, project, "Creating ForwardingRule")
	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return waitErr
	}

	return resourceComputeForwardingRuleRead(d, meta)
}

func resourceComputeForwardingRuleRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/regions/{{region}}/forwardingRules/{{name}}")
	if err != nil {
		return err
	}
	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ComputeForwardingRule %q", d.Id()))
	}

	d.Set("creation_timestamp", flattenComputeForwardingRuleCreationTimestamp(res["creationTimestamp"]))
	d.Set("description", flattenComputeForwardingRuleDescription(res["description"]))
	d.Set("ip_address", flattenComputeForwardingRuleIPAddress(res["IPAddress"]))
	d.Set("ip_protocol", flattenComputeForwardingRuleIPProtocol(res["IPProtocol"]))
	d.Set("backend_service", flattenComputeForwardingRuleBackendService(res["backendService"]))
	d.Set("ip_version", flattenComputeForwardingRuleIpVersion(res["ipVersion"]))
	d.Set("load_balancing_scheme", flattenComputeForwardingRuleLoadBalancingScheme(res["loadBalancingScheme"]))
	d.Set("name", flattenComputeForwardingRuleName(res["name"]))
	d.Set("network", flattenComputeForwardingRuleNetwork(res["network"]))
	d.Set("port_range", flattenComputeForwardingRulePortRange(res["portRange"]))
	d.Set("ports", flattenComputeForwardingRulePorts(res["ports"]))
	d.Set("subnetwork", flattenComputeForwardingRuleSubnetwork(res["subnetwork"]))
	d.Set("target", flattenComputeForwardingRuleTarget(res["target"]))
	d.Set("region", flattenComputeForwardingRuleRegion(res["region"]))
	d.Set("self_link", res["selfLink"])
	d.Set("project", project)

	return nil
}

func resourceComputeForwardingRuleUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"description":         expandComputeForwardingRuleDescription(d.Get("description")),
		"IPAddress":           expandComputeForwardingRuleIPAddress(d.Get("ip_address")),
		"IPProtocol":          expandComputeForwardingRuleIPProtocol(d.Get("ip_protocol")),
		"backendService":      expandComputeForwardingRuleBackendService(d.Get("backend_service")),
		"ipVersion":           expandComputeForwardingRuleIpVersion(d.Get("ip_version")),
		"loadBalancingScheme": expandComputeForwardingRuleLoadBalancingScheme(d.Get("load_balancing_scheme")),
		"name":                expandComputeForwardingRuleName(d.Get("name")),
		"network":             expandComputeForwardingRuleNetwork(d.Get("network")),
		"portRange":           expandComputeForwardingRulePortRange(d.Get("port_range")),
		"ports":               expandComputeForwardingRulePorts(d.Get("ports")),
		"subnetwork":          expandComputeForwardingRuleSubnetwork(d.Get("subnetwork")),
		"target":              expandComputeForwardingRuleTarget(d.Get("target")),
		"region":              expandComputeForwardingRuleRegion(d.Get("region")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/regions/{{region}}/forwardingRules/{{name}}")
	if err != nil {
		return err
	}
	res, err := Put(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error updating ForwardingRule %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Updating ForwardingRule")
	if err != nil {
		return err
	}

	return resourceComputeForwardingRuleRead(d, meta)
}

func resourceComputeForwardingRuleDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/regions/{{region}}/forwardingRules/{{name}}")
	if err != nil {
		return err
	}
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting ForwardingRule %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Updating ForwardingRule")
	if err != nil {
		return err
	}

	return nil
}

func resourceComputeForwardingRuleImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	d.Set("{{name}}", d.Id())
	return []*schema.ResourceData{d}, nil
}

func flattenComputeForwardingRuleCreationTimestamp(v interface{}) interface{} {
	return v
}

func flattenComputeForwardingRuleDescription(v interface{}) interface{} {
	return v
}

func flattenComputeForwardingRuleIPAddress(v interface{}) interface{} {
	return v
}

func flattenComputeForwardingRuleIPProtocol(v interface{}) interface{} {
	return v
}

func flattenComputeForwardingRuleBackendService(v interface{}) interface{} {
	return v
}

func flattenComputeForwardingRuleIpVersion(v interface{}) interface{} {
	return v
}

func flattenComputeForwardingRuleLoadBalancingScheme(v interface{}) interface{} {
	return v
}

func flattenComputeForwardingRuleName(v interface{}) interface{} {
	return v
}

func flattenComputeForwardingRuleNetwork(v interface{}) interface{} {
	return v
}

func flattenComputeForwardingRulePortRange(v interface{}) interface{} {
	return v
}

func flattenComputeForwardingRulePorts(v interface{}) interface{} {
	return v
}

func flattenComputeForwardingRuleSubnetwork(v interface{}) interface{} {
	return v
}

func flattenComputeForwardingRuleTarget(v interface{}) interface{} {
	return v
}

func flattenComputeForwardingRuleRegion(v interface{}) interface{} {
	return v
}

func expandComputeForwardingRuleDescription(v interface{}) interface{} {
	return v
}

func expandComputeForwardingRuleIPAddress(v interface{}) interface{} {
	return v
}

func expandComputeForwardingRuleIPProtocol(v interface{}) interface{} {
	return v
}

func expandComputeForwardingRuleBackendService(v interface{}) interface{} {
	return v
}

func expandComputeForwardingRuleIpVersion(v interface{}) interface{} {
	return v
}

func expandComputeForwardingRuleLoadBalancingScheme(v interface{}) interface{} {
	return v
}

func expandComputeForwardingRuleName(v interface{}) interface{} {
	return v
}

func expandComputeForwardingRuleNetwork(v interface{}) interface{} {
	return v
}

func expandComputeForwardingRulePortRange(v interface{}) interface{} {
	return v
}

func expandComputeForwardingRulePorts(v interface{}) interface{} {
	return v
}

func expandComputeForwardingRuleSubnetwork(v interface{}) interface{} {
	return v
}

func expandComputeForwardingRuleTarget(v interface{}) interface{} {
	return v
}

func expandComputeForwardingRuleRegion(v interface{}) interface{} {
	return v
}
