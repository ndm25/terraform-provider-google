// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated and manual changes will be
//     clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"

	"github.com/hashicorp/terraform/helper/schema"
	compute "google.golang.org/api/compute/v1"
)

func resourceComputeTargetPool() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeTargetPoolCreate,
		Read:   resourceComputeTargetPoolRead,
		Update: resourceComputeTargetPoolUpdate,
		Delete: resourceComputeTargetPoolDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeTargetPoolImport,
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type:     schema.TypeString,
				Required: true,
			},
			"region": {
				Type:             schema.TypeString,
				Required:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
			},
			"backup_pool": {
				Type:             schema.TypeString,
				Optional:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"failover_ratio": {
				Type:     schema.TypeFloat,
				Optional: true,
			},
			"health_check": {
				Type:             schema.TypeString,
				Optional:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
			},
			"instances": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Schema{
					Type:             schema.TypeString,
					DiffSuppressFunc: compareSelfLinkOrResourceName,
				},
			},
			"session_affinity": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"creation_timestamp": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"id": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"project": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
			"self_link": &schema.Schema{
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func resourceComputeTargetPoolCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"backupPool":      expandComputeTargetPoolBackupPool(d.Get("backup_pool")),
		"description":     expandComputeTargetPoolDescription(d.Get("description")),
		"failoverRatio":   expandComputeTargetPoolFailoverRatio(d.Get("failover_ratio")),
		"healthCheck":     expandComputeTargetPoolHealthCheck(d.Get("health_check")),
		"instances":       expandComputeTargetPoolInstances(d.Get("instances")),
		"name":            expandComputeTargetPoolName(d.Get("name")),
		"sessionAffinity": expandComputeTargetPoolSessionAffinity(d.Get("session_affinity")),
		"region":          expandComputeTargetPoolRegion(d.Get("region")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/regions/{{region}}/targetPools")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new TargetPool: %#v", obj)
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating TargetPool: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := computeOperationWait(config.clientCompute, op, project, "Creating TargetPool")
	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return waitErr
	}

	return resourceComputeTargetPoolRead(d, meta)
}

func resourceComputeTargetPoolRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/regions/{{region}}/targetPools/{{name}}")
	if err != nil {
		return err
	}

	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ComputeTargetPool %q", d.Id()))
	}

	d.Set("backup_pool", flattenComputeTargetPoolBackupPool(res["backupPool"]))
	d.Set("creation_timestamp", flattenComputeTargetPoolCreationTimestamp(res["creationTimestamp"]))
	d.Set("description", flattenComputeTargetPoolDescription(res["description"]))
	d.Set("failover_ratio", flattenComputeTargetPoolFailoverRatio(res["failoverRatio"]))
	d.Set("health_check", flattenComputeTargetPoolHealthCheck(res["healthCheck"]))
	d.Set("id", flattenComputeTargetPoolId(res["id"]))
	d.Set("instances", flattenComputeTargetPoolInstances(res["instances"]))
	d.Set("name", flattenComputeTargetPoolName(res["name"]))
	d.Set("session_affinity", flattenComputeTargetPoolSessionAffinity(res["sessionAffinity"]))
	d.Set("region", flattenComputeTargetPoolRegion(res["region"]))
	d.Set("self_link", res["selfLink"])
	d.Set("project", project)

	return nil
}

func resourceComputeTargetPoolUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"backupPool":      expandComputeTargetPoolBackupPool(d.Get("backup_pool")),
		"description":     expandComputeTargetPoolDescription(d.Get("description")),
		"failoverRatio":   expandComputeTargetPoolFailoverRatio(d.Get("failover_ratio")),
		"healthCheck":     expandComputeTargetPoolHealthCheck(d.Get("health_check")),
		"instances":       expandComputeTargetPoolInstances(d.Get("instances")),
		"name":            expandComputeTargetPoolName(d.Get("name")),
		"sessionAffinity": expandComputeTargetPoolSessionAffinity(d.Get("session_affinity")),
		"region":          expandComputeTargetPoolRegion(d.Get("region")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/regions/{{region}}/targetPools/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating TargetPool %q: %#v", d.Id(), obj)
	res, err := sendRequest(config, "PUT", url, obj)

	if err != nil {
		return fmt.Errorf("Error updating TargetPool %q: %s", d.Id(), err)
	}
	err = Convert(res, &op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, &op, project, "Updating TargetPool")
	if err != nil {
		return err
	}

	return resourceComputeTargetPoolRead(d, meta)
}

func resourceComputeTargetPoolDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/regions/{{region}}/targetPools/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Deleting TargetPool %q", d.Id())
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting TargetPool %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Deleting TargetPool")
	if err != nil {
		return err
	}

	return nil
}

func resourceComputeTargetPoolImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	d.Set("{{name}}", d.Id())
	return []*schema.ResourceData{d}, nil
}

func flattenComputeTargetPoolBackupPool(v interface{}) interface{} {
	return v
}

func flattenComputeTargetPoolCreationTimestamp(v interface{}) interface{} {
	return v
}

func flattenComputeTargetPoolDescription(v interface{}) interface{} {
	return v
}

func flattenComputeTargetPoolFailoverRatio(v interface{}) interface{} {
	return v
}

func flattenComputeTargetPoolHealthCheck(v interface{}) interface{} {
	return v
}

func flattenComputeTargetPoolId(v interface{}) interface{} {
	return v
}

func flattenComputeTargetPoolInstances(v interface{}) interface{} {
	return v
}

func flattenComputeTargetPoolName(v interface{}) interface{} {
	return v
}

func flattenComputeTargetPoolSessionAffinity(v interface{}) interface{} {
	return v
}

func flattenComputeTargetPoolRegion(v interface{}) interface{} {
	return v
}

func expandComputeTargetPoolBackupPool(v interface{}) interface{} {
	return v
}

func expandComputeTargetPoolDescription(v interface{}) interface{} {
	return v
}

func expandComputeTargetPoolFailoverRatio(v interface{}) interface{} {
	return v
}

func expandComputeTargetPoolHealthCheck(v interface{}) interface{} {
	return v
}

func expandComputeTargetPoolInstances(v interface{}) interface{} {
	return v
}

func expandComputeTargetPoolName(v interface{}) interface{} {
	return v
}

func expandComputeTargetPoolSessionAffinity(v interface{}) interface{} {
	return v
}

func expandComputeTargetPoolRegion(v interface{}) interface{} {
	return v
}
