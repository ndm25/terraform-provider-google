// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated and manual changes will be
//     clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"

	"github.com/hashicorp/terraform/helper/schema"
	compute "google.golang.org/api/compute/v1"
)

func resourceComputeHealthCheck() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeHealthCheckCreate,
		Read:   resourceComputeHealthCheckRead,
		Update: resourceComputeHealthCheckUpdate,
		Delete: resourceComputeHealthCheckDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeHealthCheckImport,
		},

		Schema: map[string]*schema.Schema{
			"check_interval_sec": {
				Type:     schema.TypeInt,
				Optional: true,
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"healthy_threshold": {
				Type:     schema.TypeInt,
				Optional: true,
			},
			"name": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"timeout_sec": {
				Type:     schema.TypeInt,
				Optional: true,
			},
			"unhealthy_threshold": {
				Type:     schema.TypeInt,
				Optional: true,
			},
			"type": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"http_health_check": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"host": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"request_path": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"port": {
							Type:     schema.TypeInt,
							Optional: true,
						},
						"port_name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"proxy_header": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},
			"https_health_check": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"host": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"request_path": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"port": {
							Type:     schema.TypeInt,
							Optional: true,
						},
						"port_name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"proxy_header": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},
			"tcp_health_check": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"request": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"response": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"port": {
							Type:     schema.TypeInt,
							Optional: true,
						},
						"port_name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"proxy_header": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},
			"ssl_health_check": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"request": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"response": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"port": {
							Type:     schema.TypeInt,
							Optional: true,
						},
						"port_name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"proxy_header": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},
			"creation_timestamp": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"id": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"project": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
	}
}

func resourceComputeHealthCheckCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"checkIntervalSec":   expandComputeHealthCheckCheckIntervalSec(d.Get("check_interval_sec")),
		"description":        expandComputeHealthCheckDescription(d.Get("description")),
		"healthyThreshold":   expandComputeHealthCheckHealthyThreshold(d.Get("healthy_threshold")),
		"name":               expandComputeHealthCheckName(d.Get("name")),
		"timeoutSec":         expandComputeHealthCheckTimeoutSec(d.Get("timeout_sec")),
		"unhealthyThreshold": expandComputeHealthCheckUnhealthyThreshold(d.Get("unhealthy_threshold")),
		"type":               expandComputeHealthCheckType(d.Get("type")),
		"httpHealthCheck":    expandComputeHealthCheckHttpHealthCheck(d.Get("http_health_check")),
		"httpsHealthCheck":   expandComputeHealthCheckHttpsHealthCheck(d.Get("https_health_check")),
		"tcpHealthCheck":     expandComputeHealthCheckTcpHealthCheck(d.Get("tcp_health_check")),
		"sslHealthCheck":     expandComputeHealthCheckSslHealthCheck(d.Get("ssl_health_check")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/healthChecks")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new HealthCheck: %#v", obj)
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating HealthCheck: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := computeOperationWait(config.clientCompute, op, project, "Creating HealthCheck")
	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return waitErr
	}

	return resourceComputeHealthCheckRead(d, meta)
}

func resourceComputeHealthCheckRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/healthChecks/{{name}}")
	if err != nil {
		return err
	}

	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ComputeHealthCheck %q", d.Id()))
	}

	d.Set("check_interval_sec", flattenComputeHealthCheckCheckIntervalSec(res["checkIntervalSec"]))
	d.Set("creation_timestamp", flattenComputeHealthCheckCreationTimestamp(res["creationTimestamp"]))
	d.Set("description", flattenComputeHealthCheckDescription(res["description"]))
	d.Set("healthy_threshold", flattenComputeHealthCheckHealthyThreshold(res["healthyThreshold"]))
	d.Set("id", flattenComputeHealthCheckId(res["id"]))
	d.Set("name", flattenComputeHealthCheckName(res["name"]))
	d.Set("timeout_sec", flattenComputeHealthCheckTimeoutSec(res["timeoutSec"]))
	d.Set("unhealthy_threshold", flattenComputeHealthCheckUnhealthyThreshold(res["unhealthyThreshold"]))
	d.Set("type", flattenComputeHealthCheckType(res["type"]))
	d.Set("http_health_check", flattenComputeHealthCheckHttpHealthCheck(res["httpHealthCheck"]))
	d.Set("https_health_check", flattenComputeHealthCheckHttpsHealthCheck(res["httpsHealthCheck"]))
	d.Set("tcp_health_check", flattenComputeHealthCheckTcpHealthCheck(res["tcpHealthCheck"]))
	d.Set("ssl_health_check", flattenComputeHealthCheckSslHealthCheck(res["sslHealthCheck"]))
	d.Set("self_link", res["selfLink"])
	d.Set("project", project)

	return nil
}

func resourceComputeHealthCheckUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"checkIntervalSec":   expandComputeHealthCheckCheckIntervalSec(d.Get("check_interval_sec")),
		"description":        expandComputeHealthCheckDescription(d.Get("description")),
		"healthyThreshold":   expandComputeHealthCheckHealthyThreshold(d.Get("healthy_threshold")),
		"name":               expandComputeHealthCheckName(d.Get("name")),
		"timeoutSec":         expandComputeHealthCheckTimeoutSec(d.Get("timeout_sec")),
		"unhealthyThreshold": expandComputeHealthCheckUnhealthyThreshold(d.Get("unhealthy_threshold")),
		"type":               expandComputeHealthCheckType(d.Get("type")),
		"httpHealthCheck":    expandComputeHealthCheckHttpHealthCheck(d.Get("http_health_check")),
		"httpsHealthCheck":   expandComputeHealthCheckHttpsHealthCheck(d.Get("https_health_check")),
		"tcpHealthCheck":     expandComputeHealthCheckTcpHealthCheck(d.Get("tcp_health_check")),
		"sslHealthCheck":     expandComputeHealthCheckSslHealthCheck(d.Get("ssl_health_check")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/healthChecks/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating HealthCheck %q: %#v", d.Id(), obj)
	res, err := sendRequest(config, "PUT", url, obj)

	if err != nil {
		return fmt.Errorf("Error updating HealthCheck %q: %s", d.Id(), err)
	}
	err = Convert(res, &op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, &op, project, "Updating HealthCheck")
	if err != nil {
		return err
	}

	return resourceComputeHealthCheckRead(d, meta)
}

func resourceComputeHealthCheckDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/healthChecks/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Deleting HealthCheck %q", d.Id())
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting HealthCheck %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Deleting HealthCheck")
	if err != nil {
		return err
	}

	return nil
}

func resourceComputeHealthCheckImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	d.Set("", d.Id())
	return []*schema.ResourceData{d}, nil
}

func flattenComputeHealthCheckCheckIntervalSec(v interface{}) interface{} {
	return v
}

func flattenComputeHealthCheckCreationTimestamp(v interface{}) interface{} {
	return v
}

func flattenComputeHealthCheckDescription(v interface{}) interface{} {
	return v
}

func flattenComputeHealthCheckHealthyThreshold(v interface{}) interface{} {
	return v
}

func flattenComputeHealthCheckId(v interface{}) interface{} {
	return v
}

func flattenComputeHealthCheckName(v interface{}) interface{} {
	return v
}

func flattenComputeHealthCheckTimeoutSec(v interface{}) interface{} {
	return v
}

func flattenComputeHealthCheckUnhealthyThreshold(v interface{}) interface{} {
	return v
}

func flattenComputeHealthCheckType(v interface{}) interface{} {
	return v
}

func flattenComputeHealthCheckHttpHealthCheck(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["host"] =
		flattenComputeHealthCheckHttpHealthCheckHost(original["host"])
	transformed["request_path"] =
		flattenComputeHealthCheckHttpHealthCheckRequestPath(original["requestPath"])
	transformed["port"] =
		flattenComputeHealthCheckHttpHealthCheckPort(original["port"])
	transformed["port_name"] =
		flattenComputeHealthCheckHttpHealthCheckPortName(original["portName"])
	transformed["proxy_header"] =
		flattenComputeHealthCheckHttpHealthCheckProxyHeader(original["proxyHeader"])
	return []interface{}{transformed}
}
func flattenComputeHealthCheckHttpHealthCheckHost(v interface{}) interface{} {
	return v
}
func flattenComputeHealthCheckHttpHealthCheckRequestPath(v interface{}) interface{} {
	return v
}
func flattenComputeHealthCheckHttpHealthCheckPort(v interface{}) interface{} {
	return v
}
func flattenComputeHealthCheckHttpHealthCheckPortName(v interface{}) interface{} {
	return v
}
func flattenComputeHealthCheckHttpHealthCheckProxyHeader(v interface{}) interface{} {
	return v
}

func flattenComputeHealthCheckHttpsHealthCheck(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["host"] =
		flattenComputeHealthCheckHttpsHealthCheckHost(original["host"])
	transformed["request_path"] =
		flattenComputeHealthCheckHttpsHealthCheckRequestPath(original["requestPath"])
	transformed["port"] =
		flattenComputeHealthCheckHttpsHealthCheckPort(original["port"])
	transformed["port_name"] =
		flattenComputeHealthCheckHttpsHealthCheckPortName(original["portName"])
	transformed["proxy_header"] =
		flattenComputeHealthCheckHttpsHealthCheckProxyHeader(original["proxyHeader"])
	return []interface{}{transformed}
}
func flattenComputeHealthCheckHttpsHealthCheckHost(v interface{}) interface{} {
	return v
}
func flattenComputeHealthCheckHttpsHealthCheckRequestPath(v interface{}) interface{} {
	return v
}
func flattenComputeHealthCheckHttpsHealthCheckPort(v interface{}) interface{} {
	return v
}
func flattenComputeHealthCheckHttpsHealthCheckPortName(v interface{}) interface{} {
	return v
}
func flattenComputeHealthCheckHttpsHealthCheckProxyHeader(v interface{}) interface{} {
	return v
}

func flattenComputeHealthCheckTcpHealthCheck(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["request"] =
		flattenComputeHealthCheckTcpHealthCheckRequest(original["request"])
	transformed["response"] =
		flattenComputeHealthCheckTcpHealthCheckResponse(original["response"])
	transformed["port"] =
		flattenComputeHealthCheckTcpHealthCheckPort(original["port"])
	transformed["port_name"] =
		flattenComputeHealthCheckTcpHealthCheckPortName(original["portName"])
	transformed["proxy_header"] =
		flattenComputeHealthCheckTcpHealthCheckProxyHeader(original["proxyHeader"])
	return []interface{}{transformed}
}
func flattenComputeHealthCheckTcpHealthCheckRequest(v interface{}) interface{} {
	return v
}
func flattenComputeHealthCheckTcpHealthCheckResponse(v interface{}) interface{} {
	return v
}
func flattenComputeHealthCheckTcpHealthCheckPort(v interface{}) interface{} {
	return v
}
func flattenComputeHealthCheckTcpHealthCheckPortName(v interface{}) interface{} {
	return v
}
func flattenComputeHealthCheckTcpHealthCheckProxyHeader(v interface{}) interface{} {
	return v
}

func flattenComputeHealthCheckSslHealthCheck(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["request"] =
		flattenComputeHealthCheckSslHealthCheckRequest(original["request"])
	transformed["response"] =
		flattenComputeHealthCheckSslHealthCheckResponse(original["response"])
	transformed["port"] =
		flattenComputeHealthCheckSslHealthCheckPort(original["port"])
	transformed["port_name"] =
		flattenComputeHealthCheckSslHealthCheckPortName(original["portName"])
	transformed["proxy_header"] =
		flattenComputeHealthCheckSslHealthCheckProxyHeader(original["proxyHeader"])
	return []interface{}{transformed}
}
func flattenComputeHealthCheckSslHealthCheckRequest(v interface{}) interface{} {
	return v
}
func flattenComputeHealthCheckSslHealthCheckResponse(v interface{}) interface{} {
	return v
}
func flattenComputeHealthCheckSslHealthCheckPort(v interface{}) interface{} {
	return v
}
func flattenComputeHealthCheckSslHealthCheckPortName(v interface{}) interface{} {
	return v
}
func flattenComputeHealthCheckSslHealthCheckProxyHeader(v interface{}) interface{} {
	return v
}

func expandComputeHealthCheckCheckIntervalSec(v interface{}) interface{} {
	return v
}

func expandComputeHealthCheckDescription(v interface{}) interface{} {
	return v
}

func expandComputeHealthCheckHealthyThreshold(v interface{}) interface{} {
	return v
}

func expandComputeHealthCheckName(v interface{}) interface{} {
	return v
}

func expandComputeHealthCheckTimeoutSec(v interface{}) interface{} {
	return v
}

func expandComputeHealthCheckUnhealthyThreshold(v interface{}) interface{} {
	return v
}

func expandComputeHealthCheckType(v interface{}) interface{} {
	return v
}

func expandComputeHealthCheckHttpHealthCheck(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["host"] =
			expandComputeHealthCheckHttpHealthCheckHost(original["host"])
		transformed["requestPath"] =
			expandComputeHealthCheckHttpHealthCheckRequestPath(original["request_path"])
		transformed["port"] =
			expandComputeHealthCheckHttpHealthCheckPort(original["port"])
		transformed["portName"] =
			expandComputeHealthCheckHttpHealthCheckPortName(original["port_name"])
		transformed["proxyHeader"] =
			expandComputeHealthCheckHttpHealthCheckProxyHeader(original["proxy_header"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeHealthCheckHttpHealthCheckHost(v interface{}) interface{} {
	return v
}
func expandComputeHealthCheckHttpHealthCheckRequestPath(v interface{}) interface{} {
	return v
}
func expandComputeHealthCheckHttpHealthCheckPort(v interface{}) interface{} {
	return v
}
func expandComputeHealthCheckHttpHealthCheckPortName(v interface{}) interface{} {
	return v
}
func expandComputeHealthCheckHttpHealthCheckProxyHeader(v interface{}) interface{} {
	return v
}

func expandComputeHealthCheckHttpsHealthCheck(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["host"] =
			expandComputeHealthCheckHttpsHealthCheckHost(original["host"])
		transformed["requestPath"] =
			expandComputeHealthCheckHttpsHealthCheckRequestPath(original["request_path"])
		transformed["port"] =
			expandComputeHealthCheckHttpsHealthCheckPort(original["port"])
		transformed["portName"] =
			expandComputeHealthCheckHttpsHealthCheckPortName(original["port_name"])
		transformed["proxyHeader"] =
			expandComputeHealthCheckHttpsHealthCheckProxyHeader(original["proxy_header"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeHealthCheckHttpsHealthCheckHost(v interface{}) interface{} {
	return v
}
func expandComputeHealthCheckHttpsHealthCheckRequestPath(v interface{}) interface{} {
	return v
}
func expandComputeHealthCheckHttpsHealthCheckPort(v interface{}) interface{} {
	return v
}
func expandComputeHealthCheckHttpsHealthCheckPortName(v interface{}) interface{} {
	return v
}
func expandComputeHealthCheckHttpsHealthCheckProxyHeader(v interface{}) interface{} {
	return v
}

func expandComputeHealthCheckTcpHealthCheck(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["request"] =
			expandComputeHealthCheckTcpHealthCheckRequest(original["request"])
		transformed["response"] =
			expandComputeHealthCheckTcpHealthCheckResponse(original["response"])
		transformed["port"] =
			expandComputeHealthCheckTcpHealthCheckPort(original["port"])
		transformed["portName"] =
			expandComputeHealthCheckTcpHealthCheckPortName(original["port_name"])
		transformed["proxyHeader"] =
			expandComputeHealthCheckTcpHealthCheckProxyHeader(original["proxy_header"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeHealthCheckTcpHealthCheckRequest(v interface{}) interface{} {
	return v
}
func expandComputeHealthCheckTcpHealthCheckResponse(v interface{}) interface{} {
	return v
}
func expandComputeHealthCheckTcpHealthCheckPort(v interface{}) interface{} {
	return v
}
func expandComputeHealthCheckTcpHealthCheckPortName(v interface{}) interface{} {
	return v
}
func expandComputeHealthCheckTcpHealthCheckProxyHeader(v interface{}) interface{} {
	return v
}

func expandComputeHealthCheckSslHealthCheck(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["request"] =
			expandComputeHealthCheckSslHealthCheckRequest(original["request"])
		transformed["response"] =
			expandComputeHealthCheckSslHealthCheckResponse(original["response"])
		transformed["port"] =
			expandComputeHealthCheckSslHealthCheckPort(original["port"])
		transformed["portName"] =
			expandComputeHealthCheckSslHealthCheckPortName(original["port_name"])
		transformed["proxyHeader"] =
			expandComputeHealthCheckSslHealthCheckProxyHeader(original["proxy_header"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeHealthCheckSslHealthCheckRequest(v interface{}) interface{} {
	return v
}
func expandComputeHealthCheckSslHealthCheckResponse(v interface{}) interface{} {
	return v
}
func expandComputeHealthCheckSslHealthCheckPort(v interface{}) interface{} {
	return v
}
func expandComputeHealthCheckSslHealthCheckPortName(v interface{}) interface{} {
	return v
}
func expandComputeHealthCheckSslHealthCheckProxyHeader(v interface{}) interface{} {
	return v
}
