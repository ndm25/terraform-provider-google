// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated and manual changes will be
//     clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"

	"github.com/hashicorp/terraform/helper/schema"
	compute "google.golang.org/api/compute/v1"
)

func resourceComputeHttpsHealthCheck() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeHttpsHealthCheckCreate,
		Read:   resourceComputeHttpsHealthCheckRead,
		Update: resourceComputeHttpsHealthCheckUpdate,
		Delete: resourceComputeHttpsHealthCheckDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeHttpsHealthCheckImport,
		},

		Schema: map[string]*schema.Schema{
			"check_interval_sec": {
				Type:     schema.TypeInt,
				Optional: true,
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"healthy_threshold": {
				Type:     schema.TypeInt,
				Optional: true,
			},
			"host": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"name": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"port": {
				Type:     schema.TypeInt,
				Optional: true,
			},
			"request_path": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"timeout_sec": {
				Type:     schema.TypeInt,
				Optional: true,
			},
			"unhealthy_threshold": {
				Type:     schema.TypeInt,
				Optional: true,
			},
			"creation_timestamp": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"id": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"project": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
	}
}

func resourceComputeHttpsHealthCheckCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"checkIntervalSec":   expandComputeHttpsHealthCheckCheckIntervalSec(d.Get("check_interval_sec")),
		"description":        expandComputeHttpsHealthCheckDescription(d.Get("description")),
		"healthyThreshold":   expandComputeHttpsHealthCheckHealthyThreshold(d.Get("healthy_threshold")),
		"host":               expandComputeHttpsHealthCheckHost(d.Get("host")),
		"name":               expandComputeHttpsHealthCheckName(d.Get("name")),
		"port":               expandComputeHttpsHealthCheckPort(d.Get("port")),
		"requestPath":        expandComputeHttpsHealthCheckRequestPath(d.Get("request_path")),
		"timeoutSec":         expandComputeHttpsHealthCheckTimeoutSec(d.Get("timeout_sec")),
		"unhealthyThreshold": expandComputeHttpsHealthCheckUnhealthyThreshold(d.Get("unhealthy_threshold")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/httpsHealthChecks")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new HttpsHealthCheck: %#v", obj)
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating HttpsHealthCheck: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := computeOperationWait(config.clientCompute, op, project, "Creating HttpsHealthCheck")
	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return waitErr
	}

	return resourceComputeHttpsHealthCheckRead(d, meta)
}

func resourceComputeHttpsHealthCheckRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/httpsHealthChecks/{{name}}")
	if err != nil {
		return err
	}

	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ComputeHttpsHealthCheck %q", d.Id()))
	}

	d.Set("check_interval_sec", flattenComputeHttpsHealthCheckCheckIntervalSec(res["checkIntervalSec"]))
	d.Set("creation_timestamp", flattenComputeHttpsHealthCheckCreationTimestamp(res["creationTimestamp"]))
	d.Set("description", flattenComputeHttpsHealthCheckDescription(res["description"]))
	d.Set("healthy_threshold", flattenComputeHttpsHealthCheckHealthyThreshold(res["healthyThreshold"]))
	d.Set("host", flattenComputeHttpsHealthCheckHost(res["host"]))
	d.Set("id", flattenComputeHttpsHealthCheckId(res["id"]))
	d.Set("name", flattenComputeHttpsHealthCheckName(res["name"]))
	d.Set("port", flattenComputeHttpsHealthCheckPort(res["port"]))
	d.Set("request_path", flattenComputeHttpsHealthCheckRequestPath(res["requestPath"]))
	d.Set("timeout_sec", flattenComputeHttpsHealthCheckTimeoutSec(res["timeoutSec"]))
	d.Set("unhealthy_threshold", flattenComputeHttpsHealthCheckUnhealthyThreshold(res["unhealthyThreshold"]))
	d.Set("self_link", res["selfLink"])
	d.Set("project", project)

	return nil
}

func resourceComputeHttpsHealthCheckUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"checkIntervalSec":   expandComputeHttpsHealthCheckCheckIntervalSec(d.Get("check_interval_sec")),
		"description":        expandComputeHttpsHealthCheckDescription(d.Get("description")),
		"healthyThreshold":   expandComputeHttpsHealthCheckHealthyThreshold(d.Get("healthy_threshold")),
		"host":               expandComputeHttpsHealthCheckHost(d.Get("host")),
		"name":               expandComputeHttpsHealthCheckName(d.Get("name")),
		"port":               expandComputeHttpsHealthCheckPort(d.Get("port")),
		"requestPath":        expandComputeHttpsHealthCheckRequestPath(d.Get("request_path")),
		"timeoutSec":         expandComputeHttpsHealthCheckTimeoutSec(d.Get("timeout_sec")),
		"unhealthyThreshold": expandComputeHttpsHealthCheckUnhealthyThreshold(d.Get("unhealthy_threshold")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/httpsHealthChecks/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating HttpsHealthCheck %q: %#v", d.Id(), obj)
	res, err := sendRequest(config, "PUT", url, obj)

	if err != nil {
		return fmt.Errorf("Error updating HttpsHealthCheck %q: %s", d.Id(), err)
	}
	err = Convert(res, &op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, &op, project, "Updating HttpsHealthCheck")
	if err != nil {
		return err
	}

	return resourceComputeHttpsHealthCheckRead(d, meta)
}

func resourceComputeHttpsHealthCheckDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/httpsHealthChecks/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Deleting HttpsHealthCheck %q", d.Id())
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting HttpsHealthCheck %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Deleting HttpsHealthCheck")
	if err != nil {
		return err
	}

	return nil
}

func resourceComputeHttpsHealthCheckImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	d.Set("", d.Id())
	return []*schema.ResourceData{d}, nil
}

func flattenComputeHttpsHealthCheckCheckIntervalSec(v interface{}) interface{} {
	return v
}

func flattenComputeHttpsHealthCheckCreationTimestamp(v interface{}) interface{} {
	return v
}

func flattenComputeHttpsHealthCheckDescription(v interface{}) interface{} {
	return v
}

func flattenComputeHttpsHealthCheckHealthyThreshold(v interface{}) interface{} {
	return v
}

func flattenComputeHttpsHealthCheckHost(v interface{}) interface{} {
	return v
}

func flattenComputeHttpsHealthCheckId(v interface{}) interface{} {
	return v
}

func flattenComputeHttpsHealthCheckName(v interface{}) interface{} {
	return v
}

func flattenComputeHttpsHealthCheckPort(v interface{}) interface{} {
	return v
}

func flattenComputeHttpsHealthCheckRequestPath(v interface{}) interface{} {
	return v
}

func flattenComputeHttpsHealthCheckTimeoutSec(v interface{}) interface{} {
	return v
}

func flattenComputeHttpsHealthCheckUnhealthyThreshold(v interface{}) interface{} {
	return v
}

func expandComputeHttpsHealthCheckCheckIntervalSec(v interface{}) interface{} {
	return v
}

func expandComputeHttpsHealthCheckDescription(v interface{}) interface{} {
	return v
}

func expandComputeHttpsHealthCheckHealthyThreshold(v interface{}) interface{} {
	return v
}

func expandComputeHttpsHealthCheckHost(v interface{}) interface{} {
	return v
}

func expandComputeHttpsHealthCheckName(v interface{}) interface{} {
	return v
}

func expandComputeHttpsHealthCheckPort(v interface{}) interface{} {
	return v
}

func expandComputeHttpsHealthCheckRequestPath(v interface{}) interface{} {
	return v
}

func expandComputeHttpsHealthCheckTimeoutSec(v interface{}) interface{} {
	return v
}

func expandComputeHttpsHealthCheckUnhealthyThreshold(v interface{}) interface{} {
	return v
}
