// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated and manual changes will be
//     clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google


func resourceComputeDiskType() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeDiskTypeCreate,
		Read: resourceComputeDiskTypeRead,
				Update: resourceComputeDiskTypeUpdate,
				Delete: resourceComputeDiskTypeDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeDiskTypeImport,
		},

		Schema: map[string]*schema.Schema{
	"zone": {
  Type: schema.TypeString,
  Required: true,
  DiffSuppressFunc: compareSelfLinkOrResourceName,
},
	"name": {
  Type: schema.TypeString,
  Optional: true,
},
	"creation_timestamp": {
  Type: schema.TypeString,
  Computed: true,
},
	"default_disk_size_gb": {
  Type: schema.TypeInt,
  Computed: true,
},
	"deprecated_deleted": {
  Type: schema.TypeString,
  Computed: true,
},
	"deprecated_deprecated": {
  Type: schema.TypeString,
  Computed: true,
},
	"deprecated_obsolete": {
  Type: schema.TypeString,
  Computed: true,
},
	"deprecated_replacement": {
  Type: schema.TypeString,
  Computed: true,
},
	"deprecated_state": {
  Type: schema.TypeString,
  Computed: true,
},
	"description": {
  Type: schema.TypeString,
  Computed: true,
},
	"id": {
  Type: schema.TypeInt,
  Computed: true,
},
	"valid_disk_size": {
  Type: schema.TypeString,
  Computed: true,
},
			"project": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
			"self_link": &schema.Schema{
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func resourceComputeDiskTypeCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
  "name": expandComputeDiskTypeName(d.Get("name")),
  "zone": expandComputeDiskTypeZone(d.Get("zone")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{zone}}/diskTypes")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new DiskType: %#v", obj)
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating DiskType: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := computeOperationWait(config.clientCompute, op, project, "Creating DiskType")
	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return waitErr
	}

	return resourceComputeDiskTypeRead(d, meta)
}

func resourceComputeDiskTypeRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{zone}}/diskTypes/{{name}}")
	if err != nil {
		return err
	}

	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ComputeDiskType %q", d.Id()))
	}

  d.Set("creation_timestamp", flattenComputeDiskTypeCreationTimestamp(res["creationTimestamp"]))
  d.Set("default_disk_size_gb", flattenComputeDiskTypeDefaultDiskSizeGb(res["defaultDiskSizeGb"]))
  d.Set("deprecated_deleted", flattenComputeDiskTypeDeprecated.deleted(res["deprecated.deleted"]))
  d.Set("deprecated_deprecated", flattenComputeDiskTypeDeprecated.deprecated(res["deprecated.deprecated"]))
  d.Set("deprecated_obsolete", flattenComputeDiskTypeDeprecated.obsolete(res["deprecated.obsolete"]))
  d.Set("deprecated_replacement", flattenComputeDiskTypeDeprecated.replacement(res["deprecated.replacement"]))
  d.Set("deprecated_state", flattenComputeDiskTypeDeprecated.state(res["deprecated.state"]))
  d.Set("description", flattenComputeDiskTypeDescription(res["description"]))
  d.Set("id", flattenComputeDiskTypeId(res["id"]))
  d.Set("name", flattenComputeDiskTypeName(res["name"]))
  d.Set("valid_disk_size", flattenComputeDiskTypeValidDiskSize(res["validDiskSize"]))
  d.Set("zone", flattenComputeDiskTypeZone(res["zone"]))
	d.Set("self_link", res["selfLink"])
	d.Set("project", project)

	return nil
}

func resourceComputeDiskTypeUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

		obj := map[string]interface{}{
				"name": expandComputeDiskTypeName(d.Get("name")),
				"zone": expandComputeDiskTypeZone(d.Get("zone")),
			}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{zone}}/diskTypes/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating DiskType %q: %#v", d.Id(), obj)
	res, err := sendRequest(config, "PUT", url, obj)

	if err != nil {
		return fmt.Errorf("Error updating DiskType %q: %s", d.Id(), err)
	}
	err = Convert(res, &op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, &op, project, "Updating DiskType")
	if err != nil {
		return err
	}
	

	return resourceComputeDiskTypeRead(d, meta)
}


func resourceComputeDiskTypeDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{zone}}/diskTypes/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Deleting DiskType %q", d.Id())
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting DiskType %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Deleting DiskType")
	if err != nil {
		return err
	}

	return nil
}

func resourceComputeDiskTypeImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	d.Set("", d.Id())
	return []*schema.ResourceData{d}, nil
}

  func flattenComputeDiskTypeCreationTimestamp(v interface{}) interface{} {
  return v
}

  func flattenComputeDiskTypeDefaultDiskSizeGb(v interface{}) interface{} {
  return v
}

  func flattenComputeDiskTypeDeprecated.deleted(v interface{}) interface{} {
  return v
}

  func flattenComputeDiskTypeDeprecated.deprecated(v interface{}) interface{} {
  return v
}

  func flattenComputeDiskTypeDeprecated.obsolete(v interface{}) interface{} {
  return v
}

  func flattenComputeDiskTypeDeprecated.replacement(v interface{}) interface{} {
  return v
}

  func flattenComputeDiskTypeDeprecated.state(v interface{}) interface{} {
  return v
}

  func flattenComputeDiskTypeDescription(v interface{}) interface{} {
  return v
}

  func flattenComputeDiskTypeId(v interface{}) interface{} {
  return v
}

  func flattenComputeDiskTypeName(v interface{}) interface{} {
  return v
}

  func flattenComputeDiskTypeValidDiskSize(v interface{}) interface{} {
  return v
}

  func flattenComputeDiskTypeZone(v interface{}) interface{} {
  return v
}


  func expandComputeDiskTypeName(v interface{}) interface{} {
  return v
}

  func expandComputeDiskTypeZone(v interface{}) interface{} {
  return v
}
