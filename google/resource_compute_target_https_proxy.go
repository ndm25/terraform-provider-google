// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated and manual changes will be
//     clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"

	"github.com/hashicorp/terraform/helper/schema"
	compute "google.golang.org/api/compute/v1"
)

func resourceComputeTargetHttpsProxy() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeTargetHttpsProxyCreate,
		Read:   resourceComputeTargetHttpsProxyRead,
		Update: resourceComputeTargetHttpsProxyUpdate,
		Delete: resourceComputeTargetHttpsProxyDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeTargetHttpsProxyImport,
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},
			"ssl_certificates": {
				Type:     schema.TypeList,
				Required: true,
				Elem: &schema.Schema{
					Type:             schema.TypeString,
					DiffSuppressFunc: compareSelfLinkOrResourceName,
				},
			},
			"url_map": {
				Type:             schema.TypeString,
				Required:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
			},
			"creation_timestamp": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"project": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
	}
}

func resourceComputeTargetHttpsProxyCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"description":     expandComputeTargetHttpsProxyDescription(d.Get("description")),
		"name":            expandComputeTargetHttpsProxyName(d.Get("name")),
		"sslCertificates": expandComputeTargetHttpsProxySslCertificates(d.Get("ssl_certificates")),
		"urlMap":          expandComputeTargetHttpsProxyUrlMap(d.Get("url_map")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/targetHttpsProxies")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new TargetHttpsProxy: %#v", obj)
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating TargetHttpsProxy: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := computeOperationWait(config.clientCompute, op, project, "Creating TargetHttpsProxy")
	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return waitErr
	}

	return resourceComputeTargetHttpsProxyRead(d, meta)
}

func resourceComputeTargetHttpsProxyRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/targetHttpsProxies/{{name}}")
	if err != nil {
		return err
	}

	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ComputeTargetHttpsProxy %q", d.Id()))
	}

	d.Set("creation_timestamp", flattenComputeTargetHttpsProxyCreationTimestamp(res["creationTimestamp"]))
	d.Set("description", flattenComputeTargetHttpsProxyDescription(res["description"]))
	d.Set("name", flattenComputeTargetHttpsProxyName(res["name"]))
	d.Set("ssl_certificates", flattenComputeTargetHttpsProxySslCertificates(res["sslCertificates"]))
	d.Set("url_map", flattenComputeTargetHttpsProxyUrlMap(res["urlMap"]))
	d.Set("self_link", res["selfLink"])
	d.Set("project", project)

	return nil
}

func resourceComputeTargetHttpsProxyUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	var obj map[string]interface{}
	var url string
	var res map[string]interface{}
	var op compute.Operation

	if d.HasChange("ssl_certificates") {
		obj = map[string]interface{}{
			"sslCertificates": expandComputeTargetHttpsProxySslCertificates(d.Get("ssl_certificates")),
		}
		url, err = replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/targetHttpsProxies/{{name}}/setSslCertificates")
		if err != nil {
			return err
		}
		res, err = sendRequest(config, "POST", url, obj)
		if err != nil {
			return fmt.Errorf("Error updating TargetHttpsProxy %q: %s", d.Id(), err)
		}
		err = Convert(res, &op)
		if err != nil {
			return err
		}

		err = computeOperationWait(config.clientCompute, &op, project, "Updating TargetHttpsProxy")
		if err != nil {
			return err
		}
	}
	if d.HasChange("url_map") {
		obj = map[string]interface{}{
			"urlMap": expandComputeTargetHttpsProxyUrlMap(d.Get("url_map")),
		}
		url, err = replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/targetHttpsProxies/{{name}}/setUrlMap")
		if err != nil {
			return err
		}
		res, err = sendRequest(config, "POST", url, obj)
		if err != nil {
			return fmt.Errorf("Error updating TargetHttpsProxy %q: %s", d.Id(), err)
		}
		err = Convert(res, &op)
		if err != nil {
			return err
		}

		err = computeOperationWait(config.clientCompute, &op, project, "Updating TargetHttpsProxy")
		if err != nil {
			return err
		}
	}

	return resourceComputeTargetHttpsProxyRead(d, meta)
}

func resourceComputeTargetHttpsProxyDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/targetHttpsProxies/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Deleting TargetHttpsProxy %q", d.Id())
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting TargetHttpsProxy %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Deleting TargetHttpsProxy")
	if err != nil {
		return err
	}

	return nil
}

func resourceComputeTargetHttpsProxyImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	d.Set("{{name}}", d.Id())
	return []*schema.ResourceData{d}, nil
}

func flattenComputeTargetHttpsProxyCreationTimestamp(v interface{}) interface{} {
	return v
}

func flattenComputeTargetHttpsProxyDescription(v interface{}) interface{} {
	return v
}

func flattenComputeTargetHttpsProxyName(v interface{}) interface{} {
	return v
}

func flattenComputeTargetHttpsProxySslCertificates(v interface{}) interface{} {
	return v
}

func flattenComputeTargetHttpsProxyUrlMap(v interface{}) interface{} {
	return v
}

func expandComputeTargetHttpsProxyDescription(v interface{}) interface{} {
	return v
}

func expandComputeTargetHttpsProxyName(v interface{}) interface{} {
	return v
}

func expandComputeTargetHttpsProxySslCertificates(v interface{}) interface{} {
	return v
}

func expandComputeTargetHttpsProxyUrlMap(v interface{}) interface{} {
	return v
}
