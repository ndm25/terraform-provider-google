// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by terraform-codegen and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in README.md and
//     CONTRIBUTING.md located at the root of this package.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"

	"github.com/hashicorp/terraform/helper/schema"
	compute "google.golang.org/api/compute/v1"
)

func resourceComputeSnapshot() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeSnapshotCreate,
		Read:   resourceComputeSnapshotRead,
		Update: resourceComputeSnapshotUpdate,
		Delete: resourceComputeSnapshotDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeSnapshotImport,
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type:     schema.TypeString,
				Required: true,
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"licenses": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Schema{
					Type:             schema.TypeString,
					DiffSuppressFunc: compareSelfLinkOrResourceName,
				},
			},
			"labels": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"source": {
				Type:             schema.TypeString,
				Optional:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
			},
			"zone": {
				Type:             schema.TypeString,
				Optional:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
			},
			"snapshot_encryption_key": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"raw_key": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"sha256": {
							Type:     schema.TypeString,
							Computed: true,
						},
					},
				},
			},
			"source_disk_encryption_key": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"raw_key": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"sha256": {
							Type:     schema.TypeString,
							Computed: true,
						},
					},
				},
			},
			"creation_timestamp": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"disk_size_gb": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"id": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"storage_bytes": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"project": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
			"self_link": &schema.Schema{
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func resourceComputeSnapshotCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"name":                    expandComputeSnapshotName(d.Get("name")),
		"description":             expandComputeSnapshotDescription(d.Get("description")),
		"licenses":                expandComputeSnapshotLicenses(d.Get("licenses")),
		"labels":                  expandComputeSnapshotLabels(d.Get("labels")),
		"source":                  expandComputeSnapshotSource(d.Get("source")),
		"zone":                    expandComputeSnapshotZone(d.Get("zone")),
		"snapshotEncryptionKey":   expandComputeSnapshotSnapshotEncryptionKey(d.Get("snapshot_encryption_key")),
		"sourceDiskEncryptionKey": expandComputeSnapshotSourceDiskEncryptionKey(d.Get("source_disk_encryption_key")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/snapshots")
	if err != nil {
		return err
	}
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating Snapshot: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := computeOperationWait(config.clientCompute, op, project, "Creating Snapshot")
	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return waitErr
	}

	return resourceComputeSnapshotRead(d, meta)
}

func resourceComputeSnapshotRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/snapshots/{{name}}")
	if err != nil {
		return err
	}
	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ComputeSnapshot %q", d.Id()))
	}

	d.Set("creation_timestamp", flattenComputeSnapshotCreationTimestamp(res["creationTimestamp"]))
	d.Set("id", flattenComputeSnapshotId(res["id"]))
	d.Set("disk_size_gb", flattenComputeSnapshotDiskSizeGb(res["diskSizeGb"]))
	d.Set("name", flattenComputeSnapshotName(res["name"]))
	d.Set("description", flattenComputeSnapshotDescription(res["description"]))
	d.Set("storage_bytes", flattenComputeSnapshotStorageBytes(res["storageBytes"]))
	d.Set("licenses", flattenComputeSnapshotLicenses(res["licenses"]))
	d.Set("labels", flattenComputeSnapshotLabels(res["labels"]))
	d.Set("source", flattenComputeSnapshotSource(res["source"]))
	d.Set("zone", flattenComputeSnapshotZone(res["zone"]))
	d.Set("snapshot_encryption_key", flattenComputeSnapshotSnapshotEncryptionKey(res["snapshotEncryptionKey"]))
	d.Set("source_disk_encryption_key", flattenComputeSnapshotSourceDiskEncryptionKey(res["sourceDiskEncryptionKey"]))
	d.Set("self_link", res["selfLink"])
	d.Set("project", project)

	return nil
}

func resourceComputeSnapshotUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"name":                    expandComputeSnapshotName(d.Get("name")),
		"description":             expandComputeSnapshotDescription(d.Get("description")),
		"licenses":                expandComputeSnapshotLicenses(d.Get("licenses")),
		"labels":                  expandComputeSnapshotLabels(d.Get("labels")),
		"source":                  expandComputeSnapshotSource(d.Get("source")),
		"zone":                    expandComputeSnapshotZone(d.Get("zone")),
		"snapshotEncryptionKey":   expandComputeSnapshotSnapshotEncryptionKey(d.Get("snapshot_encryption_key")),
		"sourceDiskEncryptionKey": expandComputeSnapshotSourceDiskEncryptionKey(d.Get("source_disk_encryption_key")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/snapshots/{{name}}")
	if err != nil {
		return err
	}
	res, err := Put(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error updating Snapshot %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Updating Snapshot")
	if err != nil {
		return err
	}

	return resourceComputeSnapshotRead(d, meta)
}

func resourceComputeSnapshotDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/snapshots/{{name}}")
	if err != nil {
		return err
	}
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting Snapshot %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Updating Snapshot")
	if err != nil {
		return err
	}

	return nil
}

func resourceComputeSnapshotImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	d.Set("", d.Id())
	return []*schema.ResourceData{d}, nil
}

func flattenComputeSnapshotCreationTimestamp(v interface{}) interface{} {
	return v
}

func flattenComputeSnapshotId(v interface{}) interface{} {
	return v
}

func flattenComputeSnapshotDiskSizeGb(v interface{}) interface{} {
	return v
}

func flattenComputeSnapshotName(v interface{}) interface{} {
	return v
}

func flattenComputeSnapshotDescription(v interface{}) interface{} {
	return v
}

func flattenComputeSnapshotStorageBytes(v interface{}) interface{} {
	return v
}

func flattenComputeSnapshotLicenses(v interface{}) interface{} {
	return v
}

func flattenComputeSnapshotLabels(v interface{}) interface{} {
	return v
}

func flattenComputeSnapshotSource(v interface{}) interface{} {
	return v
}

func flattenComputeSnapshotZone(v interface{}) interface{} {
	return v
}

func flattenComputeSnapshotSnapshotEncryptionKey(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["raw_key"] =
		flattenComputeSnapshotSnapshotEncryptionKeyRawKey(original["rawKey"])
	transformed["sha256"] =
		flattenComputeSnapshotSnapshotEncryptionKeySha256(original["sha256"])
	return []interface{}{transformed}
}
func flattenComputeSnapshotSnapshotEncryptionKeyRawKey(v interface{}) interface{} {
	return v
}
func flattenComputeSnapshotSnapshotEncryptionKeySha256(v interface{}) interface{} {
	return v
}

func flattenComputeSnapshotSourceDiskEncryptionKey(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["raw_key"] =
		flattenComputeSnapshotSourceDiskEncryptionKeyRawKey(original["rawKey"])
	transformed["sha256"] =
		flattenComputeSnapshotSourceDiskEncryptionKeySha256(original["sha256"])
	return []interface{}{transformed}
}
func flattenComputeSnapshotSourceDiskEncryptionKeyRawKey(v interface{}) interface{} {
	return v
}
func flattenComputeSnapshotSourceDiskEncryptionKeySha256(v interface{}) interface{} {
	return v
}

func expandComputeSnapshotName(v interface{}) interface{} {
	return v
}

func expandComputeSnapshotDescription(v interface{}) interface{} {
	return v
}

func expandComputeSnapshotLicenses(v interface{}) interface{} {
	return v
}

func expandComputeSnapshotLabels(v interface{}) interface{} {
	return v
}

func expandComputeSnapshotSource(v interface{}) interface{} {
	return v
}

func expandComputeSnapshotZone(v interface{}) interface{} {
	return v
}

func expandComputeSnapshotSnapshotEncryptionKey(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["rawKey"] =
			expandComputeSnapshotSnapshotEncryptionKeyRawKey(original["raw_key"])
		transformed["sha256"] =
			expandComputeSnapshotSnapshotEncryptionKeySha256(original["sha256"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeSnapshotSnapshotEncryptionKeyRawKey(v interface{}) interface{} {
	return v
}
func expandComputeSnapshotSnapshotEncryptionKeySha256(v interface{}) interface{} {
	return v
}

func expandComputeSnapshotSourceDiskEncryptionKey(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["rawKey"] =
			expandComputeSnapshotSourceDiskEncryptionKeyRawKey(original["raw_key"])
		transformed["sha256"] =
			expandComputeSnapshotSourceDiskEncryptionKeySha256(original["sha256"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeSnapshotSourceDiskEncryptionKeyRawKey(v interface{}) interface{} {
	return v
}
func expandComputeSnapshotSourceDiskEncryptionKeySha256(v interface{}) interface{} {
	return v
}
