// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated and manual changes will be
//     clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"

	"github.com/hashicorp/terraform/helper/schema"
	compute "google.golang.org/api/compute/v1"
)

func resourceComputeNetwork() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeNetworkCreate,
		Read:   resourceComputeNetworkRead,
		Update: resourceComputeNetworkUpdate,
		Delete: resourceComputeNetworkDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeNetworkImport,
		},

		Schema: map[string]*schema.Schema{
			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"gateway_ipv4": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"ipv4_range": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"name": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"auto_create_subnetworks": {
				Type:     schema.TypeBool,
				Optional: true,
			},
			"creation_timestamp": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"id": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"subnetworks": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"project": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
			"self_link": &schema.Schema{
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func resourceComputeNetworkCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"description":           expandComputeNetworkDescription(d.Get("description")),
		"gateway_ipv4":          expandComputeNetworkGateway_ipv4(d.Get("gateway_ipv4")),
		"ipv4_range":            expandComputeNetworkIpv4_range(d.Get("ipv4_range")),
		"name":                  expandComputeNetworkName(d.Get("name")),
		"autoCreateSubnetworks": expandComputeNetworkAutoCreateSubnetworks(d.Get("auto_create_subnetworks")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/networks")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Network: %#v", obj)
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating Network: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := computeOperationWait(config.clientCompute, op, project, "Creating Network")
	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return waitErr
	}

	return resourceComputeNetworkRead(d, meta)
}

func resourceComputeNetworkRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/networks/{{name}}")
	if err != nil {
		return err
	}

	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ComputeNetwork %q", d.Id()))
	}

	d.Set("description", flattenComputeNetworkDescription(res["description"]))
	d.Set("gateway_ipv4", flattenComputeNetworkGateway_ipv4(res["gateway_ipv4"]))
	d.Set("id", flattenComputeNetworkId(res["id"]))
	d.Set("ipv4_range", flattenComputeNetworkIpv4_range(res["ipv4_range"]))
	d.Set("name", flattenComputeNetworkName(res["name"]))
	d.Set("subnetworks", flattenComputeNetworkSubnetworks(res["subnetworks"]))
	d.Set("auto_create_subnetworks", flattenComputeNetworkAutoCreateSubnetworks(res["autoCreateSubnetworks"]))
	d.Set("creation_timestamp", flattenComputeNetworkCreationTimestamp(res["creationTimestamp"]))
	d.Set("self_link", res["selfLink"])
	d.Set("project", project)

	return nil
}

func resourceComputeNetworkUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"description":           expandComputeNetworkDescription(d.Get("description")),
		"gateway_ipv4":          expandComputeNetworkGateway_ipv4(d.Get("gateway_ipv4")),
		"ipv4_range":            expandComputeNetworkIpv4_range(d.Get("ipv4_range")),
		"name":                  expandComputeNetworkName(d.Get("name")),
		"autoCreateSubnetworks": expandComputeNetworkAutoCreateSubnetworks(d.Get("auto_create_subnetworks")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/networks/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Network %q: %#v", d.Id(), obj)
	res, err := sendRequest(config, "PUT", url, obj)

	if err != nil {
		return fmt.Errorf("Error updating Network %q: %s", d.Id(), err)
	}
	err = Convert(res, &op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, &op, project, "Updating Network")
	if err != nil {
		return err
	}

	return resourceComputeNetworkRead(d, meta)
}

func resourceComputeNetworkDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/networks/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Deleting Network %q", d.Id())
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting Network %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Deleting Network")
	if err != nil {
		return err
	}

	return nil
}

func resourceComputeNetworkImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	d.Set("", d.Id())
	return []*schema.ResourceData{d}, nil
}

func flattenComputeNetworkDescription(v interface{}) interface{} {
	return v
}

func flattenComputeNetworkGateway_ipv4(v interface{}) interface{} {
	return v
}

func flattenComputeNetworkId(v interface{}) interface{} {
	return v
}

func flattenComputeNetworkIpv4_range(v interface{}) interface{} {
	return v
}

func flattenComputeNetworkName(v interface{}) interface{} {
	return v
}

func flattenComputeNetworkSubnetworks(v interface{}) interface{} {
	return v
}

func flattenComputeNetworkAutoCreateSubnetworks(v interface{}) interface{} {
	return v
}

func flattenComputeNetworkCreationTimestamp(v interface{}) interface{} {
	return v
}

func expandComputeNetworkDescription(v interface{}) interface{} {
	return v
}

func expandComputeNetworkGateway_ipv4(v interface{}) interface{} {
	return v
}

func expandComputeNetworkIpv4_range(v interface{}) interface{} {
	return v
}

func expandComputeNetworkName(v interface{}) interface{} {
	return v
}

func expandComputeNetworkAutoCreateSubnetworks(v interface{}) interface{} {
	return v
}
