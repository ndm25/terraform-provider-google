// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by terraform-codegen and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in README.md and
//     CONTRIBUTING.md located at the root of this package.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"

	"github.com/hashicorp/terraform/helper/schema"
	compute "google.golang.org/api/compute/v1"
)

func resourceComputeDisk() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeDiskCreate,
		Read:   resourceComputeDiskRead,
		Update: resourceComputeDiskUpdate,
		Delete: resourceComputeDiskDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeDiskImport,
		},

		Schema: map[string]*schema.Schema{
			"zone": {
				Type:             schema.TypeString,
				Required:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"licenses": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"name": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"size_gb": {
				Type:     schema.TypeInt,
				Optional: true,
			},
			"source_image": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"disk_encryption_key": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"raw_key": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"sha256": {
							Type:     schema.TypeString,
							Computed: true,
						},
					},
				},
			},
			"source_image_encryption_key": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"raw_key": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"sha256": {
							Type:     schema.TypeString,
							Computed: true,
						},
					},
				},
			},
			"source_snapshot": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"source_snapshot_encryption_key": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"raw_key": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"sha256": {
							Type:     schema.TypeString,
							Computed: true,
						},
					},
				},
			},
			"creation_timestamp": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"id": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"last_attach_timestamp": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"last_detach_timestamp": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"source_image_id": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"source_snapshot_id": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"type": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"users": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"project": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
			"self_link": &schema.Schema{
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func resourceComputeDiskCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"description":                 expandComputeDiskDescription(d.Get("description")),
		"licenses":                    expandComputeDiskLicenses(d.Get("licenses")),
		"name":                        expandComputeDiskName(d.Get("name")),
		"sizeGb":                      expandComputeDiskSizeGb(d.Get("size_gb")),
		"sourceImage":                 expandComputeDiskSourceImage(d.Get("source_image")),
		"zone":                        expandComputeDiskZone(d.Get("zone")),
		"diskEncryptionKey":           expandComputeDiskDiskEncryptionKey(d.Get("disk_encryption_key")),
		"sourceImageEncryptionKey":    expandComputeDiskSourceImageEncryptionKey(d.Get("source_image_encryption_key")),
		"sourceSnapshot":              expandComputeDiskSourceSnapshot(d.Get("source_snapshot")),
		"sourceSnapshotEncryptionKey": expandComputeDiskSourceSnapshotEncryptionKey(d.Get("source_snapshot_encryption_key")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{zone}}/disks")
	if err != nil {
		return err
	}
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating Disk: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := computeOperationWait(config.clientCompute, op, project, "Creating Disk")
	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return waitErr
	}

	return resourceComputeDiskRead(d, meta)
}

func resourceComputeDiskRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{zone}}/disks/{{name}}")
	if err != nil {
		return err
	}
	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ComputeDisk %q", d.Id()))
	}

	d.Set("creation_timestamp", flattenComputeDiskCreationTimestamp(res["creationTimestamp"]))
	d.Set("description", flattenComputeDiskDescription(res["description"]))
	d.Set("id", flattenComputeDiskId(res["id"]))
	d.Set("last_attach_timestamp", flattenComputeDiskLastAttachTimestamp(res["lastAttachTimestamp"]))
	d.Set("last_detach_timestamp", flattenComputeDiskLastDetachTimestamp(res["lastDetachTimestamp"]))
	d.Set("licenses", flattenComputeDiskLicenses(res["licenses"]))
	d.Set("name", flattenComputeDiskName(res["name"]))
	d.Set("size_gb", flattenComputeDiskSizeGb(res["sizeGb"]))
	d.Set("source_image", flattenComputeDiskSourceImage(res["sourceImage"]))
	d.Set("type", flattenComputeDiskType(res["type"]))
	d.Set("users", flattenComputeDiskUsers(res["users"]))
	d.Set("zone", flattenComputeDiskZone(res["zone"]))
	d.Set("disk_encryption_key", flattenComputeDiskDiskEncryptionKey(res["diskEncryptionKey"]))
	d.Set("source_image_encryption_key", flattenComputeDiskSourceImageEncryptionKey(res["sourceImageEncryptionKey"]))
	d.Set("source_image_id", flattenComputeDiskSourceImageId(res["sourceImageId"]))
	d.Set("source_snapshot", flattenComputeDiskSourceSnapshot(res["sourceSnapshot"]))
	d.Set("source_snapshot_encryption_key", flattenComputeDiskSourceSnapshotEncryptionKey(res["sourceSnapshotEncryptionKey"]))
	d.Set("source_snapshot_id", flattenComputeDiskSourceSnapshotId(res["sourceSnapshotId"]))
	d.Set("self_link", res["selfLink"])
	d.Set("project", project)

	return nil
}

func resourceComputeDiskUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"description":                 expandComputeDiskDescription(d.Get("description")),
		"licenses":                    expandComputeDiskLicenses(d.Get("licenses")),
		"name":                        expandComputeDiskName(d.Get("name")),
		"sizeGb":                      expandComputeDiskSizeGb(d.Get("size_gb")),
		"sourceImage":                 expandComputeDiskSourceImage(d.Get("source_image")),
		"zone":                        expandComputeDiskZone(d.Get("zone")),
		"diskEncryptionKey":           expandComputeDiskDiskEncryptionKey(d.Get("disk_encryption_key")),
		"sourceImageEncryptionKey":    expandComputeDiskSourceImageEncryptionKey(d.Get("source_image_encryption_key")),
		"sourceSnapshot":              expandComputeDiskSourceSnapshot(d.Get("source_snapshot")),
		"sourceSnapshotEncryptionKey": expandComputeDiskSourceSnapshotEncryptionKey(d.Get("source_snapshot_encryption_key")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{zone}}/disks/{{name}}")
	if err != nil {
		return err
	}
	res, err := Put(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error updating Disk %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Updating Disk")
	if err != nil {
		return err
	}

	return resourceComputeDiskRead(d, meta)
}

func resourceComputeDiskDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{zone}}/disks/{{name}}")
	if err != nil {
		return err
	}
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting Disk %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Updating Disk")
	if err != nil {
		return err
	}

	return nil
}

func resourceComputeDiskImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	d.Set("", d.Id())
	return []*schema.ResourceData{d}, nil
}

func flattenComputeDiskCreationTimestamp(v interface{}) interface{} {
	return v
}

func flattenComputeDiskDescription(v interface{}) interface{} {
	return v
}

func flattenComputeDiskId(v interface{}) interface{} {
	return v
}

func flattenComputeDiskLastAttachTimestamp(v interface{}) interface{} {
	return v
}

func flattenComputeDiskLastDetachTimestamp(v interface{}) interface{} {
	return v
}

func flattenComputeDiskLicenses(v interface{}) interface{} {
	return v
}

func flattenComputeDiskName(v interface{}) interface{} {
	return v
}

func flattenComputeDiskSizeGb(v interface{}) interface{} {
	return v
}

func flattenComputeDiskSourceImage(v interface{}) interface{} {
	return v
}

func flattenComputeDiskType(v interface{}) interface{} {
	return v
}

func flattenComputeDiskUsers(v interface{}) interface{} {
	return v
}

func flattenComputeDiskZone(v interface{}) interface{} {
	return v
}

func flattenComputeDiskDiskEncryptionKey(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["raw_key"] =
		flattenComputeDiskDiskEncryptionKeyRawKey(original["rawKey"])
	transformed["sha256"] =
		flattenComputeDiskDiskEncryptionKeySha256(original["sha256"])
	return []interface{}{transformed}
}
func flattenComputeDiskDiskEncryptionKeyRawKey(v interface{}) interface{} {
	return v
}
func flattenComputeDiskDiskEncryptionKeySha256(v interface{}) interface{} {
	return v
}

func flattenComputeDiskSourceImageEncryptionKey(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["raw_key"] =
		flattenComputeDiskSourceImageEncryptionKeyRawKey(original["rawKey"])
	transformed["sha256"] =
		flattenComputeDiskSourceImageEncryptionKeySha256(original["sha256"])
	return []interface{}{transformed}
}
func flattenComputeDiskSourceImageEncryptionKeyRawKey(v interface{}) interface{} {
	return v
}
func flattenComputeDiskSourceImageEncryptionKeySha256(v interface{}) interface{} {
	return v
}

func flattenComputeDiskSourceImageId(v interface{}) interface{} {
	return v
}

func flattenComputeDiskSourceSnapshot(v interface{}) interface{} {
	return v
}

func flattenComputeDiskSourceSnapshotEncryptionKey(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["raw_key"] =
		flattenComputeDiskSourceSnapshotEncryptionKeyRawKey(original["rawKey"])
	transformed["sha256"] =
		flattenComputeDiskSourceSnapshotEncryptionKeySha256(original["sha256"])
	return []interface{}{transformed}
}
func flattenComputeDiskSourceSnapshotEncryptionKeyRawKey(v interface{}) interface{} {
	return v
}
func flattenComputeDiskSourceSnapshotEncryptionKeySha256(v interface{}) interface{} {
	return v
}

func flattenComputeDiskSourceSnapshotId(v interface{}) interface{} {
	return v
}

func expandComputeDiskDescription(v interface{}) interface{} {
	return v
}

func expandComputeDiskLicenses(v interface{}) interface{} {
	return v
}

func expandComputeDiskName(v interface{}) interface{} {
	return v
}

func expandComputeDiskSizeGb(v interface{}) interface{} {
	return v
}

func expandComputeDiskSourceImage(v interface{}) interface{} {
	return v
}

func expandComputeDiskZone(v interface{}) interface{} {
	return v
}

func expandComputeDiskDiskEncryptionKey(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["rawKey"] =
			expandComputeDiskDiskEncryptionKeyRawKey(original["raw_key"])
		transformed["sha256"] =
			expandComputeDiskDiskEncryptionKeySha256(original["sha256"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeDiskDiskEncryptionKeyRawKey(v interface{}) interface{} {
	return v
}
func expandComputeDiskDiskEncryptionKeySha256(v interface{}) interface{} {
	return v
}

func expandComputeDiskSourceImageEncryptionKey(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["rawKey"] =
			expandComputeDiskSourceImageEncryptionKeyRawKey(original["raw_key"])
		transformed["sha256"] =
			expandComputeDiskSourceImageEncryptionKeySha256(original["sha256"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeDiskSourceImageEncryptionKeyRawKey(v interface{}) interface{} {
	return v
}
func expandComputeDiskSourceImageEncryptionKeySha256(v interface{}) interface{} {
	return v
}

func expandComputeDiskSourceSnapshot(v interface{}) interface{} {
	return v
}

func expandComputeDiskSourceSnapshotEncryptionKey(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["rawKey"] =
			expandComputeDiskSourceSnapshotEncryptionKeyRawKey(original["raw_key"])
		transformed["sha256"] =
			expandComputeDiskSourceSnapshotEncryptionKeySha256(original["sha256"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeDiskSourceSnapshotEncryptionKeyRawKey(v interface{}) interface{} {
	return v
}
func expandComputeDiskSourceSnapshotEncryptionKeySha256(v interface{}) interface{} {
	return v
}
