// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated and manual changes will be
//     clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"

	"github.com/hashicorp/terraform/helper/schema"
	compute "google.golang.org/api/compute/v1"
)

func resourceComputeImage() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeImageCreate,
		Read:   resourceComputeImageRead,
		Update: resourceComputeImageUpdate,
		Delete: resourceComputeImageDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeImageImport,
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type:     schema.TypeString,
				Required: true,
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"disk_size_gb": {
				Type:     schema.TypeInt,
				Optional: true,
			},
			"family": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"raw_disk": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"container_type": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"sha1_checksum": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"source": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},
			"source_disk": {
				Type:             schema.TypeString,
				Optional:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
			},
			"archive_size_bytes": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"creation_timestamp": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"project": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
	}
}

func resourceComputeImageCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"description": expandComputeImageDescription(d.Get("description")),
		"diskSizeGb":  expandComputeImageDiskSizeGb(d.Get("disk_size_gb")),
		"family":      expandComputeImageFamily(d.Get("family")),
		"name":        expandComputeImageName(d.Get("name")),
		"rawDisk":     expandComputeImageRawDisk(d.Get("raw_disk")),
		"sourceDisk":  expandComputeImageSourceDisk(d.Get("source_disk")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/images")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Image: %#v", obj)
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating Image: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := computeOperationWait(config.clientCompute, op, project, "Creating Image")
	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return waitErr
	}

	return resourceComputeImageRead(d, meta)
}

func resourceComputeImageRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/images/{{name}}")
	if err != nil {
		return err
	}

	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ComputeImage %q", d.Id()))
	}

	d.Set("archive_size_bytes", flattenComputeImageArchiveSizeBytes(res["archiveSizeBytes"]))
	d.Set("creation_timestamp", flattenComputeImageCreationTimestamp(res["creationTimestamp"]))
	d.Set("description", flattenComputeImageDescription(res["description"]))
	d.Set("disk_size_gb", flattenComputeImageDiskSizeGb(res["diskSizeGb"]))
	d.Set("family", flattenComputeImageFamily(res["family"]))
	d.Set("name", flattenComputeImageName(res["name"]))
	d.Set("raw_disk", flattenComputeImageRawDisk(res["rawDisk"]))
	d.Set("source_disk", flattenComputeImageSourceDisk(res["sourceDisk"]))
	d.Set("self_link", res["selfLink"])
	d.Set("project", project)

	return nil
}

func resourceComputeImageUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"description": expandComputeImageDescription(d.Get("description")),
		"diskSizeGb":  expandComputeImageDiskSizeGb(d.Get("disk_size_gb")),
		"family":      expandComputeImageFamily(d.Get("family")),
		"name":        expandComputeImageName(d.Get("name")),
		"rawDisk":     expandComputeImageRawDisk(d.Get("raw_disk")),
		"sourceDisk":  expandComputeImageSourceDisk(d.Get("source_disk")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/images/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Image %q: %#v", d.Id(), obj)
	res, err := sendRequest(config, "PUT", url, obj)

	if err != nil {
		return fmt.Errorf("Error updating Image %q: %s", d.Id(), err)
	}
	err = Convert(res, &op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, &op, project, "Updating Image")
	if err != nil {
		return err
	}

	return resourceComputeImageRead(d, meta)
}

func resourceComputeImageDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/images/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Deleting Image %q", d.Id())
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting Image %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Deleting Image")
	if err != nil {
		return err
	}

	return nil
}

func resourceComputeImageImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	d.Set("{{name}}", d.Id())
	return []*schema.ResourceData{d}, nil
}

func flattenComputeImageArchiveSizeBytes(v interface{}) interface{} {
	return v
}

func flattenComputeImageCreationTimestamp(v interface{}) interface{} {
	return v
}

func flattenComputeImageDescription(v interface{}) interface{} {
	return v
}

func flattenComputeImageDiskSizeGb(v interface{}) interface{} {
	return v
}

func flattenComputeImageFamily(v interface{}) interface{} {
	return v
}

func flattenComputeImageName(v interface{}) interface{} {
	return v
}

func flattenComputeImageRawDisk(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["container_type"] =
		flattenComputeImageRawDiskContainerType(original["containerType"])
	transformed["sha1_checksum"] =
		flattenComputeImageRawDiskSha1Checksum(original["sha1Checksum"])
	transformed["source"] =
		flattenComputeImageRawDiskSource(original["source"])
	return []interface{}{transformed}
}
func flattenComputeImageRawDiskContainerType(v interface{}) interface{} {
	return v
}
func flattenComputeImageRawDiskSha1Checksum(v interface{}) interface{} {
	return v
}
func flattenComputeImageRawDiskSource(v interface{}) interface{} {
	return v
}

func flattenComputeImageSourceDisk(v interface{}) interface{} {
	return v
}

func expandComputeImageDescription(v interface{}) interface{} {
	return v
}

func expandComputeImageDiskSizeGb(v interface{}) interface{} {
	return v
}

func expandComputeImageFamily(v interface{}) interface{} {
	return v
}

func expandComputeImageName(v interface{}) interface{} {
	return v
}

func expandComputeImageRawDisk(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["containerType"] =
			expandComputeImageRawDiskContainerType(original["container_type"])
		transformed["sha1Checksum"] =
			expandComputeImageRawDiskSha1Checksum(original["sha1_checksum"])
		transformed["source"] =
			expandComputeImageRawDiskSource(original["source"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeImageRawDiskContainerType(v interface{}) interface{} {
	return v
}
func expandComputeImageRawDiskSha1Checksum(v interface{}) interface{} {
	return v
}
func expandComputeImageRawDiskSource(v interface{}) interface{} {
	return v
}

func expandComputeImageSourceDisk(v interface{}) interface{} {
	return v
}
