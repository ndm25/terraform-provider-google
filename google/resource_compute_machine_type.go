// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by terraform-codegen and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in README.md and
//     CONTRIBUTING.md located at the root of this package.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"

	"github.com/hashicorp/terraform/helper/schema"
	compute "google.golang.org/api/compute/v1"
)

func resourceComputeMachineType() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeMachineTypeCreate,
		Read:   resourceComputeMachineTypeRead,
		Update: resourceComputeMachineTypeUpdate,
		Delete: resourceComputeMachineTypeDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeMachineTypeImport,
		},

		Schema: map[string]*schema.Schema{
			"zone": {
				Type:             schema.TypeString,
				Required:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
			},
			"name": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"creation_timestamp": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"deprecated": {
				Type:     schema.TypeList,
				Computed: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"deleted": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"deprecated": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"obsolete": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"replacement": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"state": {
							Type:     schema.TypeString,
							Computed: true,
						},
					},
				},
			},
			"description": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"guest_cpus": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"id": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"is_shared_cpu": {
				Type:     schema.TypeBool,
				Computed: true,
			},
			"maximum_persistent_disks": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"maximum_persistent_disks_size_gb": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"memory_mb": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"project": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
			"self_link": &schema.Schema{
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func resourceComputeMachineTypeCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"name": expandComputeMachineTypeName(d.Get("name")),
		"zone": expandComputeMachineTypeZone(d.Get("zone")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{zone}}/machineTypes")
	if err != nil {
		return err
	}
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating MachineType: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := computeOperationWait(config.clientCompute, op, project, "Creating MachineType")
	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return waitErr
	}

	return resourceComputeMachineTypeRead(d, meta)
}

func resourceComputeMachineTypeRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{zone}}/machineTypes/{{name}}")
	if err != nil {
		return err
	}
	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ComputeMachineType %q", d.Id()))
	}

	d.Set("creation_timestamp", flattenComputeMachineTypeCreationTimestamp(res["creationTimestamp"]))
	d.Set("deprecated", flattenComputeMachineTypeDeprecated(res["deprecated"]))
	d.Set("description", flattenComputeMachineTypeDescription(res["description"]))
	d.Set("guest_cpus", flattenComputeMachineTypeGuestCpus(res["guestCpus"]))
	d.Set("id", flattenComputeMachineTypeId(res["id"]))
	d.Set("is_shared_cpu", flattenComputeMachineTypeIsSharedCpu(res["isSharedCpu"]))
	d.Set("maximum_persistent_disks", flattenComputeMachineTypeMaximumPersistentDisks(res["maximumPersistentDisks"]))
	d.Set("maximum_persistent_disks_size_gb", flattenComputeMachineTypeMaximumPersistentDisksSizeGb(res["maximumPersistentDisksSizeGb"]))
	d.Set("memory_mb", flattenComputeMachineTypeMemoryMb(res["memoryMb"]))
	d.Set("name", flattenComputeMachineTypeName(res["name"]))
	d.Set("zone", flattenComputeMachineTypeZone(res["zone"]))
	d.Set("self_link", res["selfLink"])
	d.Set("project", project)

	return nil
}

func resourceComputeMachineTypeUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"name": expandComputeMachineTypeName(d.Get("name")),
		"zone": expandComputeMachineTypeZone(d.Get("zone")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{zone}}/machineTypes/{{name}}")
	if err != nil {
		return err
	}
	res, err := Put(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error updating MachineType %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Updating MachineType")
	if err != nil {
		return err
	}

	return resourceComputeMachineTypeRead(d, meta)
}

func resourceComputeMachineTypeDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{zone}}/machineTypes/{{name}}")
	if err != nil {
		return err
	}
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting MachineType %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Updating MachineType")
	if err != nil {
		return err
	}

	return nil
}

func resourceComputeMachineTypeImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	d.Set("", d.Id())
	return []*schema.ResourceData{d}, nil
}

func flattenComputeMachineTypeCreationTimestamp(v interface{}) interface{} {
	return v
}

func flattenComputeMachineTypeDeprecated(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["deleted"] =
		flattenComputeMachineTypeDeprecatedDeleted(original["deleted"])
	transformed["deprecated"] =
		flattenComputeMachineTypeDeprecatedDeprecated(original["deprecated"])
	transformed["obsolete"] =
		flattenComputeMachineTypeDeprecatedObsolete(original["obsolete"])
	transformed["replacement"] =
		flattenComputeMachineTypeDeprecatedReplacement(original["replacement"])
	transformed["state"] =
		flattenComputeMachineTypeDeprecatedState(original["state"])
	return []interface{}{transformed}
}
func flattenComputeMachineTypeDeprecatedDeleted(v interface{}) interface{} {
	return v
}
func flattenComputeMachineTypeDeprecatedDeprecated(v interface{}) interface{} {
	return v
}
func flattenComputeMachineTypeDeprecatedObsolete(v interface{}) interface{} {
	return v
}
func flattenComputeMachineTypeDeprecatedReplacement(v interface{}) interface{} {
	return v
}
func flattenComputeMachineTypeDeprecatedState(v interface{}) interface{} {
	return v
}

func flattenComputeMachineTypeDescription(v interface{}) interface{} {
	return v
}

func flattenComputeMachineTypeGuestCpus(v interface{}) interface{} {
	return v
}

func flattenComputeMachineTypeId(v interface{}) interface{} {
	return v
}

func flattenComputeMachineTypeIsSharedCpu(v interface{}) interface{} {
	return v
}

func flattenComputeMachineTypeMaximumPersistentDisks(v interface{}) interface{} {
	return v
}

func flattenComputeMachineTypeMaximumPersistentDisksSizeGb(v interface{}) interface{} {
	return v
}

func flattenComputeMachineTypeMemoryMb(v interface{}) interface{} {
	return v
}

func flattenComputeMachineTypeName(v interface{}) interface{} {
	return v
}

func flattenComputeMachineTypeZone(v interface{}) interface{} {
	return v
}

func expandComputeMachineTypeName(v interface{}) interface{} {
	return v
}

func expandComputeMachineTypeZone(v interface{}) interface{} {
	return v
}
