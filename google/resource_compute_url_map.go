// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated and manual changes will be
//     clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"

	"github.com/hashicorp/terraform/helper/schema"
	compute "google.golang.org/api/compute/v1"
)

func resourceComputeUrlMap() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeUrlMapCreate,
		Read:   resourceComputeUrlMapRead,
		Update: resourceComputeUrlMapUpdate,
		Delete: resourceComputeUrlMapDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeUrlMapImport,
		},

		Schema: map[string]*schema.Schema{
			"default_service": {
				Type:             schema.TypeString,
				Required:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"host_rules": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"description": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"hosts": {
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"path_matcher": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},
			"name": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"path_matchers": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"default_service": {
							Type:             schema.TypeString,
							Optional:         true,
							DiffSuppressFunc: compareSelfLinkOrResourceName,
						},
						"description": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"path_rules": {
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"paths": {
										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"service": {
										Type:             schema.TypeString,
										Optional:         true,
										DiffSuppressFunc: compareSelfLinkOrResourceName,
									},
								},
							},
						},
					},
				},
			},
			"tests": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"description": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"host": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"path": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"service": {
							Type:             schema.TypeString,
							Optional:         true,
							DiffSuppressFunc: compareSelfLinkOrResourceName,
						},
					},
				},
			},
			"creation_timestamp": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"id": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"project": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
			"self_link": &schema.Schema{
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func resourceComputeUrlMapCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"defaultService": expandComputeUrlMapDefaultService(d.Get("default_service")),
		"description":    expandComputeUrlMapDescription(d.Get("description")),
		"hostRules":      expandComputeUrlMapHostRules(d.Get("host_rules")),
		"name":           expandComputeUrlMapName(d.Get("name")),
		"pathMatchers":   expandComputeUrlMapPathMatchers(d.Get("path_matchers")),
		"tests":          expandComputeUrlMapTests(d.Get("tests")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/urlMaps")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new UrlMap: %#v", obj)
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating UrlMap: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := computeOperationWait(config.clientCompute, op, project, "Creating UrlMap")
	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return waitErr
	}

	return resourceComputeUrlMapRead(d, meta)
}

func resourceComputeUrlMapRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/urlMaps/{{name}}")
	if err != nil {
		return err
	}

	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ComputeUrlMap %q", d.Id()))
	}

	d.Set("creation_timestamp", flattenComputeUrlMapCreationTimestamp(res["creationTimestamp"]))
	d.Set("default_service", flattenComputeUrlMapDefaultService(res["defaultService"]))
	d.Set("description", flattenComputeUrlMapDescription(res["description"]))
	d.Set("host_rules", flattenComputeUrlMapHostRules(res["hostRules"]))
	d.Set("id", flattenComputeUrlMapId(res["id"]))
	d.Set("name", flattenComputeUrlMapName(res["name"]))
	d.Set("path_matchers", flattenComputeUrlMapPathMatchers(res["pathMatchers"]))
	d.Set("tests", flattenComputeUrlMapTests(res["tests"]))
	d.Set("self_link", res["selfLink"])
	d.Set("project", project)

	return nil
}

func resourceComputeUrlMapUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"defaultService": expandComputeUrlMapDefaultService(d.Get("default_service")),
		"description":    expandComputeUrlMapDescription(d.Get("description")),
		"hostRules":      expandComputeUrlMapHostRules(d.Get("host_rules")),
		"name":           expandComputeUrlMapName(d.Get("name")),
		"pathMatchers":   expandComputeUrlMapPathMatchers(d.Get("path_matchers")),
		"tests":          expandComputeUrlMapTests(d.Get("tests")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/urlMaps/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating UrlMap %q: %#v", d.Id(), obj)
	res, err := sendRequest(config, "PUT", url, obj)

	if err != nil {
		return fmt.Errorf("Error updating UrlMap %q: %s", d.Id(), err)
	}
	err = Convert(res, &op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, &op, project, "Updating UrlMap")
	if err != nil {
		return err
	}

	return resourceComputeUrlMapRead(d, meta)
}

func resourceComputeUrlMapDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/global/urlMaps/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Deleting UrlMap %q", d.Id())
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting UrlMap %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Deleting UrlMap")
	if err != nil {
		return err
	}

	return nil
}

func resourceComputeUrlMapImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	d.Set("", d.Id())
	return []*schema.ResourceData{d}, nil
}

func flattenComputeUrlMapCreationTimestamp(v interface{}) interface{} {
	return v
}

func flattenComputeUrlMapDefaultService(v interface{}) interface{} {
	return v
}

func flattenComputeUrlMapDescription(v interface{}) interface{} {
	return v
}

func flattenComputeUrlMapHostRules(v interface{}) interface{} {
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"description":  flattenComputeUrlMapHostRulesDescription(original["description"]),
			"hosts":        flattenComputeUrlMapHostRulesHosts(original["hosts"]),
			"path_matcher": flattenComputeUrlMapHostRulesPathMatcher(original["pathMatcher"]),
		})
	}
	return transformed
}
func flattenComputeUrlMapHostRulesDescription(v interface{}) interface{} {
	return v
}
func flattenComputeUrlMapHostRulesHosts(v interface{}) interface{} {
	return v
}
func flattenComputeUrlMapHostRulesPathMatcher(v interface{}) interface{} {
	return v
}

func flattenComputeUrlMapId(v interface{}) interface{} {
	return v
}

func flattenComputeUrlMapName(v interface{}) interface{} {
	return v
}

func flattenComputeUrlMapPathMatchers(v interface{}) interface{} {
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"default_service": flattenComputeUrlMapPathMatchersDefaultService(original["defaultService"]),
			"description":     flattenComputeUrlMapPathMatchersDescription(original["description"]),
			"name":            flattenComputeUrlMapPathMatchersName(original["name"]),
			"path_rules":      flattenComputeUrlMapPathMatchersPathRules(original["pathRules"]),
		})
	}
	return transformed
}
func flattenComputeUrlMapPathMatchersDefaultService(v interface{}) interface{} {
	return v
}
func flattenComputeUrlMapPathMatchersDescription(v interface{}) interface{} {
	return v
}
func flattenComputeUrlMapPathMatchersName(v interface{}) interface{} {
	return v
}
func flattenComputeUrlMapPathMatchersPathRules(v interface{}) interface{} {
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"paths":   flattenComputeUrlMapPathMatchersPathRulesPaths(original["paths"]),
			"service": flattenComputeUrlMapPathMatchersPathRulesService(original["service"]),
		})
	}
	return transformed
}
func flattenComputeUrlMapPathMatchersPathRulesPaths(v interface{}) interface{} {
	return v
}
func flattenComputeUrlMapPathMatchersPathRulesService(v interface{}) interface{} {
	return v
}

func flattenComputeUrlMapTests(v interface{}) interface{} {
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"description": flattenComputeUrlMapTestsDescription(original["description"]),
			"host":        flattenComputeUrlMapTestsHost(original["host"]),
			"path":        flattenComputeUrlMapTestsPath(original["path"]),
			"service":     flattenComputeUrlMapTestsService(original["service"]),
		})
	}
	return transformed
}
func flattenComputeUrlMapTestsDescription(v interface{}) interface{} {
	return v
}
func flattenComputeUrlMapTestsHost(v interface{}) interface{} {
	return v
}
func flattenComputeUrlMapTestsPath(v interface{}) interface{} {
	return v
}
func flattenComputeUrlMapTestsService(v interface{}) interface{} {
	return v
}

func expandComputeUrlMapDefaultService(v interface{}) interface{} {
	return v
}

func expandComputeUrlMapDescription(v interface{}) interface{} {
	return v
}

func expandComputeUrlMapHostRules(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["description"] =
			expandComputeUrlMapHostRulesDescription(original["description"])
		transformed["hosts"] =
			expandComputeUrlMapHostRulesHosts(original["hosts"])
		transformed["pathMatcher"] =
			expandComputeUrlMapHostRulesPathMatcher(original["path_matcher"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeUrlMapHostRulesDescription(v interface{}) interface{} {
	return v
}
func expandComputeUrlMapHostRulesHosts(v interface{}) interface{} {
	return v
}
func expandComputeUrlMapHostRulesPathMatcher(v interface{}) interface{} {
	return v
}

func expandComputeUrlMapName(v interface{}) interface{} {
	return v
}

func expandComputeUrlMapPathMatchers(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["defaultService"] =
			expandComputeUrlMapPathMatchersDefaultService(original["default_service"])
		transformed["description"] =
			expandComputeUrlMapPathMatchersDescription(original["description"])
		transformed["name"] =
			expandComputeUrlMapPathMatchersName(original["name"])
		transformed["pathRules"] =
			expandComputeUrlMapPathMatchersPathRules(original["path_rules"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeUrlMapPathMatchersDefaultService(v interface{}) interface{} {
	return v
}
func expandComputeUrlMapPathMatchersDescription(v interface{}) interface{} {
	return v
}
func expandComputeUrlMapPathMatchersName(v interface{}) interface{} {
	return v
}
func expandComputeUrlMapPathMatchersPathRules(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["paths"] =
			expandComputeUrlMapPathMatchersPathRulesPaths(original["paths"])
		transformed["service"] =
			expandComputeUrlMapPathMatchersPathRulesService(original["service"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeUrlMapPathMatchersPathRulesPaths(v interface{}) interface{} {
	return v
}
func expandComputeUrlMapPathMatchersPathRulesService(v interface{}) interface{} {
	return v
}

func expandComputeUrlMapTests(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["description"] =
			expandComputeUrlMapTestsDescription(original["description"])
		transformed["host"] =
			expandComputeUrlMapTestsHost(original["host"])
		transformed["path"] =
			expandComputeUrlMapTestsPath(original["path"])
		transformed["service"] =
			expandComputeUrlMapTestsService(original["service"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeUrlMapTestsDescription(v interface{}) interface{} {
	return v
}
func expandComputeUrlMapTestsHost(v interface{}) interface{} {
	return v
}
func expandComputeUrlMapTestsPath(v interface{}) interface{} {
	return v
}
func expandComputeUrlMapTestsService(v interface{}) interface{} {
	return v
}
