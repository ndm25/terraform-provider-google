// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated and manual changes will be
//     clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"

	"github.com/hashicorp/terraform/helper/schema"
	compute "google.golang.org/api/compute/v1"
)

func resourceComputeInstance() *schema.Resource {
	return &schema.Resource{
		Create: resourceComputeInstanceCreate,
		Read:   resourceComputeInstanceRead,
		Update: resourceComputeInstanceUpdate,
		Delete: resourceComputeInstanceDelete,

		Importer: &schema.ResourceImporter{
			State: resourceComputeInstanceImport,
		},

		Schema: map[string]*schema.Schema{
			"zone": {
				Type:             schema.TypeString,
				Required:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
			},
			"can_ip_forward": {
				Type:     schema.TypeBool,
				Optional: true,
			},
			"disks": {
				Type:     schema.TypeList,
				Optional: true,
				ForceNew: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"initialize_params": {
							Type:     schema.TypeList,
							Required: true,
							ForceNew: true,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"disk_name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"disk_size_gb": {
										Type:     schema.TypeInt,
										Optional: true,
									},
									"disk_type": {
										Type:             schema.TypeString,
										Optional:         true,
										DiffSuppressFunc: compareSelfLinkOrResourceName,
									},
									"source_image": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"source_image_encryption_key": {
										Type:     schema.TypeList,
										Optional: true,
										MaxItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"raw_key": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"sha256": {
													Type:     schema.TypeString,
													Computed: true,
												},
											},
										},
									},
								},
							},
						},
						"auto_delete": {
							Type:     schema.TypeBool,
							Optional: true,
						},
						"boot": {
							Type:     schema.TypeBool,
							Optional: true,
						},
						"device_name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"disk_encryption_key": {
							Type:     schema.TypeList,
							Optional: true,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"raw_key": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"rsa_encrypted_key": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"sha256": {
										Type:     schema.TypeString,
										Computed: true,
									},
								},
							},
						},
						"index": {
							Type:     schema.TypeInt,
							Optional: true,
						},
						"interface": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"mode": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"source": {
							Type:             schema.TypeString,
							Optional:         true,
							DiffSuppressFunc: compareSelfLinkOrResourceName,
						},
						"type": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},
			"guest_accelerators": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"accelerator_count": {
							Type:     schema.TypeInt,
							Optional: true,
						},
						"accelerator_type": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},
			"label_fingerprint": {
				Type:     schema.TypeString,
				Optional: true,
			},
			// TODO: Property 'metadata' of type Api::Type::NameValues is not supported
			"machine_type": {
				Type:             schema.TypeString,
				Optional:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
			},
			"min_cpu_platform": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"name": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"network_interfaces": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"access_configs": {
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
									"nat_ip": {
										Type:             schema.TypeString,
										Required:         true,
										DiffSuppressFunc: compareSelfLinkOrResourceName,
									},
									"type": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},
						"alias_ip_ranges": {
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"ip_cidr_range": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"subnetwork_range_name": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
						"network": {
							Type:             schema.TypeString,
							Optional:         true,
							DiffSuppressFunc: compareSelfLinkOrResourceName,
						},
						"network_ip": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"subnetwork": {
							Type:             schema.TypeString,
							Optional:         true,
							DiffSuppressFunc: compareSelfLinkOrResourceName,
						},
						"name": {
							Type:     schema.TypeString,
							Computed: true,
						},
					},
				},
			},
			"scheduling": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"automatic_restart": {
							Type:     schema.TypeBool,
							Optional: true,
						},
						"on_host_maintenance": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"preemptible": {
							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},
			"service_accounts": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"email": {
							Type:     schema.TypeBool,
							Optional: true,
						},
						"scopes": {
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},
			"tags": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"fingerprint": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"items": {
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},
			"cpu_platform": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"creation_timestamp": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"id": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"status": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"status_message": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"project": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
			"self_link": &schema.Schema{
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func resourceComputeInstanceCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"canIpForward":      expandComputeInstanceCanIpForward(d.Get("can_ip_forward")),
		"disks":             expandComputeInstanceDisks(d.Get("disks")),
		"guestAccelerators": expandComputeInstanceGuestAccelerators(d.Get("guest_accelerators")),
		"labelFingerprint":  expandComputeInstanceLabelFingerprint(d.Get("label_fingerprint")),
		"metadata":          expandComputeInstanceMetadata(d.Get("metadata")),
		"machineType":       expandComputeInstanceMachineType(d.Get("machine_type")),
		"minCpuPlatform":    expandComputeInstanceMinCpuPlatform(d.Get("min_cpu_platform")),
		"name":              expandComputeInstanceName(d.Get("name")),
		"networkInterfaces": expandComputeInstanceNetworkInterfaces(d.Get("network_interfaces")),
		"scheduling":        expandComputeInstanceScheduling(d.Get("scheduling")),
		"serviceAccounts":   expandComputeInstanceServiceAccounts(d.Get("service_accounts")),
		"tags":              expandComputeInstanceTags(d.Get("tags")),
		"zone":              expandComputeInstanceZone(d.Get("zone")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{zone}}/instances")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Instance: %#v", obj)
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating Instance: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := computeOperationWait(config.clientCompute, op, project, "Creating Instance")
	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return waitErr
	}

	return resourceComputeInstanceRead(d, meta)
}

func resourceComputeInstanceRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{zone}}/instances/{{name}}")
	if err != nil {
		return err
	}

	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ComputeInstance %q", d.Id()))
	}

	d.Set("can_ip_forward", flattenComputeInstanceCanIpForward(res["canIpForward"]))
	d.Set("cpu_platform", flattenComputeInstanceCpuPlatform(res["cpuPlatform"]))
	d.Set("creation_timestamp", flattenComputeInstanceCreationTimestamp(res["creationTimestamp"]))
	d.Set("disks", flattenComputeInstanceDisks(res["disks"]))
	d.Set("guest_accelerators", flattenComputeInstanceGuestAccelerators(res["guestAccelerators"]))
	d.Set("id", flattenComputeInstanceId(res["id"]))
	d.Set("label_fingerprint", flattenComputeInstanceLabelFingerprint(res["labelFingerprint"]))
	d.Set("metadata", flattenComputeInstanceMetadata(res["metadata"]))
	d.Set("machine_type", flattenComputeInstanceMachineType(res["machineType"]))
	d.Set("min_cpu_platform", flattenComputeInstanceMinCpuPlatform(res["minCpuPlatform"]))
	d.Set("name", flattenComputeInstanceName(res["name"]))
	d.Set("network_interfaces", flattenComputeInstanceNetworkInterfaces(res["networkInterfaces"]))
	d.Set("scheduling", flattenComputeInstanceScheduling(res["scheduling"]))
	d.Set("service_accounts", flattenComputeInstanceServiceAccounts(res["serviceAccounts"]))
	d.Set("status", flattenComputeInstanceStatus(res["status"]))
	d.Set("status_message", flattenComputeInstanceStatusMessage(res["statusMessage"]))
	d.Set("tags", flattenComputeInstanceTags(res["tags"]))
	d.Set("zone", flattenComputeInstanceZone(res["zone"]))
	d.Set("self_link", res["selfLink"])
	d.Set("project", project)

	return nil
}

func resourceComputeInstanceUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
		"canIpForward":      expandComputeInstanceCanIpForward(d.Get("can_ip_forward")),
		"disks":             expandComputeInstanceDisks(d.Get("disks")),
		"guestAccelerators": expandComputeInstanceGuestAccelerators(d.Get("guest_accelerators")),
		"labelFingerprint":  expandComputeInstanceLabelFingerprint(d.Get("label_fingerprint")),
		"metadata":          expandComputeInstanceMetadata(d.Get("metadata")),
		"machineType":       expandComputeInstanceMachineType(d.Get("machine_type")),
		"minCpuPlatform":    expandComputeInstanceMinCpuPlatform(d.Get("min_cpu_platform")),
		"name":              expandComputeInstanceName(d.Get("name")),
		"networkInterfaces": expandComputeInstanceNetworkInterfaces(d.Get("network_interfaces")),
		"scheduling":        expandComputeInstanceScheduling(d.Get("scheduling")),
		"serviceAccounts":   expandComputeInstanceServiceAccounts(d.Get("service_accounts")),
		"tags":              expandComputeInstanceTags(d.Get("tags")),
		"zone":              expandComputeInstanceZone(d.Get("zone")),
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{zone}}/instances/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Instance %q: %#v", d.Id(), obj)
	res, err := sendRequest(config, "PUT", url, obj)

	if err != nil {
		return fmt.Errorf("Error updating Instance %q: %s", d.Id(), err)
	}
	err = Convert(res, &op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, &op, project, "Updating Instance")
	if err != nil {
		return err
	}

	return resourceComputeInstanceRead(d, meta)
}

func resourceComputeInstanceDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "https://www.googleapis.com/compute/v1/projects/{{project}}/zones/{{zone}}/instances/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Deleting Instance %q", d.Id())
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting Instance %q: %s", d.Id(), err)
	}

	op := &compute.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = computeOperationWait(config.clientCompute, op, project, "Deleting Instance")
	if err != nil {
		return err
	}

	return nil
}

func resourceComputeInstanceImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	d.Set("", d.Id())
	return []*schema.ResourceData{d}, nil
}

func flattenComputeInstanceCanIpForward(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceCpuPlatform(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceCreationTimestamp(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceDisks(v interface{}) interface{} {
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"auto_delete":         flattenComputeInstanceDisksAutoDelete(original["autoDelete"]),
			"boot":                flattenComputeInstanceDisksBoot(original["boot"]),
			"device_name":         flattenComputeInstanceDisksDeviceName(original["deviceName"]),
			"disk_encryption_key": flattenComputeInstanceDisksDiskEncryptionKey(original["diskEncryptionKey"]),
			"index":               flattenComputeInstanceDisksIndex(original["index"]),
			"initialize_params":   flattenComputeInstanceDisksInitializeParams(original["initializeParams"]),
			"interface":           flattenComputeInstanceDisksInterface(original["interface"]),
			"mode":                flattenComputeInstanceDisksMode(original["mode"]),
			"source":              flattenComputeInstanceDisksSource(original["source"]),
			"type":                flattenComputeInstanceDisksType(original["type"]),
		})
	}
	return transformed
}
func flattenComputeInstanceDisksAutoDelete(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceDisksBoot(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceDisksDeviceName(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceDisksDiskEncryptionKey(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["raw_key"] =
		flattenComputeInstanceDisksDiskEncryptionKeyRawKey(original["rawKey"])
	transformed["rsa_encrypted_key"] =
		flattenComputeInstanceDisksDiskEncryptionKeyRsaEncryptedKey(original["rsaEncryptedKey"])
	transformed["sha256"] =
		flattenComputeInstanceDisksDiskEncryptionKeySha256(original["sha256"])
	return []interface{}{transformed}
}
func flattenComputeInstanceDisksDiskEncryptionKeyRawKey(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceDisksDiskEncryptionKeyRsaEncryptedKey(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceDisksDiskEncryptionKeySha256(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceDisksIndex(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceDisksInitializeParams(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["disk_name"] =
		flattenComputeInstanceDisksInitializeParamsDiskName(original["diskName"])
	transformed["disk_size_gb"] =
		flattenComputeInstanceDisksInitializeParamsDiskSizeGb(original["diskSizeGb"])
	transformed["disk_type"] =
		flattenComputeInstanceDisksInitializeParamsDiskType(original["diskType"])
	transformed["source_image"] =
		flattenComputeInstanceDisksInitializeParamsSourceImage(original["sourceImage"])
	transformed["source_image_encryption_key"] =
		flattenComputeInstanceDisksInitializeParamsSourceImageEncryptionKey(original["sourceImageEncryptionKey"])
	return []interface{}{transformed}
}
func flattenComputeInstanceDisksInitializeParamsDiskName(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceDisksInitializeParamsDiskSizeGb(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceDisksInitializeParamsDiskType(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceDisksInitializeParamsSourceImage(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceDisksInitializeParamsSourceImageEncryptionKey(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["raw_key"] =
		flattenComputeInstanceDisksInitializeParamsSourceImageEncryptionKeyRawKey(original["rawKey"])
	transformed["sha256"] =
		flattenComputeInstanceDisksInitializeParamsSourceImageEncryptionKeySha256(original["sha256"])
	return []interface{}{transformed}
}
func flattenComputeInstanceDisksInitializeParamsSourceImageEncryptionKeyRawKey(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceDisksInitializeParamsSourceImageEncryptionKeySha256(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceDisksInterface(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceDisksMode(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceDisksSource(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceDisksType(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceGuestAccelerators(v interface{}) interface{} {
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"accelerator_count": flattenComputeInstanceGuestAcceleratorsAcceleratorCount(original["acceleratorCount"]),
			"accelerator_type":  flattenComputeInstanceGuestAcceleratorsAcceleratorType(original["acceleratorType"]),
		})
	}
	return transformed
}
func flattenComputeInstanceGuestAcceleratorsAcceleratorCount(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceGuestAcceleratorsAcceleratorType(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceId(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceLabelFingerprint(v interface{}) interface{} {
	return v
}

// TODO: Property 'metadata' of type Api::Type::NameValues is not supported

func flattenComputeInstanceMachineType(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceMinCpuPlatform(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceName(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceNetworkInterfaces(v interface{}) interface{} {
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"access_configs":  flattenComputeInstanceNetworkInterfacesAccessConfigs(original["accessConfigs"]),
			"alias_ip_ranges": flattenComputeInstanceNetworkInterfacesAliasIpRanges(original["aliasIpRanges"]),
			"name":            flattenComputeInstanceNetworkInterfacesName(original["name"]),
			"network":         flattenComputeInstanceNetworkInterfacesNetwork(original["network"]),
			"network_ip":      flattenComputeInstanceNetworkInterfacesNetworkIP(original["networkIP"]),
			"subnetwork":      flattenComputeInstanceNetworkInterfacesSubnetwork(original["subnetwork"]),
		})
	}
	return transformed
}
func flattenComputeInstanceNetworkInterfacesAccessConfigs(v interface{}) interface{} {
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"name":   flattenComputeInstanceNetworkInterfacesAccessConfigsName(original["name"]),
			"nat_ip": flattenComputeInstanceNetworkInterfacesAccessConfigsNatIP(original["natIP"]),
			"type":   flattenComputeInstanceNetworkInterfacesAccessConfigsType(original["type"]),
		})
	}
	return transformed
}
func flattenComputeInstanceNetworkInterfacesAccessConfigsName(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceNetworkInterfacesAccessConfigsNatIP(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceNetworkInterfacesAccessConfigsType(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceNetworkInterfacesAliasIpRanges(v interface{}) interface{} {
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"ip_cidr_range":         flattenComputeInstanceNetworkInterfacesAliasIpRangesIpCidrRange(original["ipCidrRange"]),
			"subnetwork_range_name": flattenComputeInstanceNetworkInterfacesAliasIpRangesSubnetworkRangeName(original["subnetworkRangeName"]),
		})
	}
	return transformed
}
func flattenComputeInstanceNetworkInterfacesAliasIpRangesIpCidrRange(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceNetworkInterfacesAliasIpRangesSubnetworkRangeName(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceNetworkInterfacesName(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceNetworkInterfacesNetwork(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceNetworkInterfacesNetworkIP(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceNetworkInterfacesSubnetwork(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceScheduling(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["automatic_restart"] =
		flattenComputeInstanceSchedulingAutomaticRestart(original["automaticRestart"])
	transformed["on_host_maintenance"] =
		flattenComputeInstanceSchedulingOnHostMaintenance(original["onHostMaintenance"])
	transformed["preemptible"] =
		flattenComputeInstanceSchedulingPreemptible(original["preemptible"])
	return []interface{}{transformed}
}
func flattenComputeInstanceSchedulingAutomaticRestart(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceSchedulingOnHostMaintenance(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceSchedulingPreemptible(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceServiceAccounts(v interface{}) interface{} {
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"email":  flattenComputeInstanceServiceAccountsEmail(original["email"]),
			"scopes": flattenComputeInstanceServiceAccountsScopes(original["scopes"]),
		})
	}
	return transformed
}
func flattenComputeInstanceServiceAccountsEmail(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceServiceAccountsScopes(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceStatus(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceStatusMessage(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceTags(v interface{}) interface{} {
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["fingerprint"] =
		flattenComputeInstanceTagsFingerprint(original["fingerprint"])
	transformed["items"] =
		flattenComputeInstanceTagsItems(original["items"])
	return []interface{}{transformed}
}
func flattenComputeInstanceTagsFingerprint(v interface{}) interface{} {
	return v
}
func flattenComputeInstanceTagsItems(v interface{}) interface{} {
	return v
}

func flattenComputeInstanceZone(v interface{}) interface{} {
	return v
}

func expandComputeInstanceCanIpForward(v interface{}) interface{} {
	return v
}

func expandComputeInstanceDisks(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["autoDelete"] =
			expandComputeInstanceDisksAutoDelete(original["auto_delete"])
		transformed["boot"] =
			expandComputeInstanceDisksBoot(original["boot"])
		transformed["deviceName"] =
			expandComputeInstanceDisksDeviceName(original["device_name"])
		transformed["diskEncryptionKey"] =
			expandComputeInstanceDisksDiskEncryptionKey(original["disk_encryption_key"])
		transformed["index"] =
			expandComputeInstanceDisksIndex(original["index"])
		transformed["initializeParams"] =
			expandComputeInstanceDisksInitializeParams(original["initialize_params"])
		transformed["interface"] =
			expandComputeInstanceDisksInterface(original["interface"])
		transformed["mode"] =
			expandComputeInstanceDisksMode(original["mode"])
		transformed["source"] =
			expandComputeInstanceDisksSource(original["source"])
		transformed["type"] =
			expandComputeInstanceDisksType(original["type"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceDisksAutoDelete(v interface{}) interface{} {
	return v
}
func expandComputeInstanceDisksBoot(v interface{}) interface{} {
	return v
}
func expandComputeInstanceDisksDeviceName(v interface{}) interface{} {
	return v
}
func expandComputeInstanceDisksDiskEncryptionKey(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["rawKey"] =
			expandComputeInstanceDisksDiskEncryptionKeyRawKey(original["raw_key"])
		transformed["rsaEncryptedKey"] =
			expandComputeInstanceDisksDiskEncryptionKeyRsaEncryptedKey(original["rsa_encrypted_key"])
		transformed["sha256"] =
			expandComputeInstanceDisksDiskEncryptionKeySha256(original["sha256"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceDisksDiskEncryptionKeyRawKey(v interface{}) interface{} {
	return v
}
func expandComputeInstanceDisksDiskEncryptionKeyRsaEncryptedKey(v interface{}) interface{} {
	return v
}
func expandComputeInstanceDisksDiskEncryptionKeySha256(v interface{}) interface{} {
	return v
}

func expandComputeInstanceDisksIndex(v interface{}) interface{} {
	return v
}
func expandComputeInstanceDisksInitializeParams(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["diskName"] =
			expandComputeInstanceDisksInitializeParamsDiskName(original["disk_name"])
		transformed["diskSizeGb"] =
			expandComputeInstanceDisksInitializeParamsDiskSizeGb(original["disk_size_gb"])
		transformed["diskType"] =
			expandComputeInstanceDisksInitializeParamsDiskType(original["disk_type"])
		transformed["sourceImage"] =
			expandComputeInstanceDisksInitializeParamsSourceImage(original["source_image"])
		transformed["sourceImageEncryptionKey"] =
			expandComputeInstanceDisksInitializeParamsSourceImageEncryptionKey(original["source_image_encryption_key"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceDisksInitializeParamsDiskName(v interface{}) interface{} {
	return v
}
func expandComputeInstanceDisksInitializeParamsDiskSizeGb(v interface{}) interface{} {
	return v
}
func expandComputeInstanceDisksInitializeParamsDiskType(v interface{}) interface{} {
	return v
}
func expandComputeInstanceDisksInitializeParamsSourceImage(v interface{}) interface{} {
	return v
}
func expandComputeInstanceDisksInitializeParamsSourceImageEncryptionKey(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["rawKey"] =
			expandComputeInstanceDisksInitializeParamsSourceImageEncryptionKeyRawKey(original["raw_key"])
		transformed["sha256"] =
			expandComputeInstanceDisksInitializeParamsSourceImageEncryptionKeySha256(original["sha256"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceDisksInitializeParamsSourceImageEncryptionKeyRawKey(v interface{}) interface{} {
	return v
}
func expandComputeInstanceDisksInitializeParamsSourceImageEncryptionKeySha256(v interface{}) interface{} {
	return v
}

func expandComputeInstanceDisksInterface(v interface{}) interface{} {
	return v
}
func expandComputeInstanceDisksMode(v interface{}) interface{} {
	return v
}
func expandComputeInstanceDisksSource(v interface{}) interface{} {
	return v
}
func expandComputeInstanceDisksType(v interface{}) interface{} {
	return v
}

func expandComputeInstanceGuestAccelerators(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["acceleratorCount"] =
			expandComputeInstanceGuestAcceleratorsAcceleratorCount(original["accelerator_count"])
		transformed["acceleratorType"] =
			expandComputeInstanceGuestAcceleratorsAcceleratorType(original["accelerator_type"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceGuestAcceleratorsAcceleratorCount(v interface{}) interface{} {
	return v
}
func expandComputeInstanceGuestAcceleratorsAcceleratorType(v interface{}) interface{} {
	return v
}

func expandComputeInstanceLabelFingerprint(v interface{}) interface{} {
	return v
}

// TODO: Property 'metadata' of type Api::Type::NameValues is not supported

func expandComputeInstanceMachineType(v interface{}) interface{} {
	return v
}

func expandComputeInstanceMinCpuPlatform(v interface{}) interface{} {
	return v
}

func expandComputeInstanceName(v interface{}) interface{} {
	return v
}

func expandComputeInstanceNetworkInterfaces(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["accessConfigs"] =
			expandComputeInstanceNetworkInterfacesAccessConfigs(original["access_configs"])
		transformed["aliasIpRanges"] =
			expandComputeInstanceNetworkInterfacesAliasIpRanges(original["alias_ip_ranges"])
		transformed["name"] =
			expandComputeInstanceNetworkInterfacesName(original["name"])
		transformed["network"] =
			expandComputeInstanceNetworkInterfacesNetwork(original["network"])
		transformed["networkIP"] =
			expandComputeInstanceNetworkInterfacesNetworkIP(original["network_ip"])
		transformed["subnetwork"] =
			expandComputeInstanceNetworkInterfacesSubnetwork(original["subnetwork"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceNetworkInterfacesAccessConfigs(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["name"] =
			expandComputeInstanceNetworkInterfacesAccessConfigsName(original["name"])
		transformed["natIP"] =
			expandComputeInstanceNetworkInterfacesAccessConfigsNatIP(original["nat_ip"])
		transformed["type"] =
			expandComputeInstanceNetworkInterfacesAccessConfigsType(original["type"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceNetworkInterfacesAccessConfigsName(v interface{}) interface{} {
	return v
}
func expandComputeInstanceNetworkInterfacesAccessConfigsNatIP(v interface{}) interface{} {
	return v
}
func expandComputeInstanceNetworkInterfacesAccessConfigsType(v interface{}) interface{} {
	return v
}

func expandComputeInstanceNetworkInterfacesAliasIpRanges(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["ipCidrRange"] =
			expandComputeInstanceNetworkInterfacesAliasIpRangesIpCidrRange(original["ip_cidr_range"])
		transformed["subnetworkRangeName"] =
			expandComputeInstanceNetworkInterfacesAliasIpRangesSubnetworkRangeName(original["subnetwork_range_name"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceNetworkInterfacesAliasIpRangesIpCidrRange(v interface{}) interface{} {
	return v
}
func expandComputeInstanceNetworkInterfacesAliasIpRangesSubnetworkRangeName(v interface{}) interface{} {
	return v
}

func expandComputeInstanceNetworkInterfacesName(v interface{}) interface{} {
	return v
}
func expandComputeInstanceNetworkInterfacesNetwork(v interface{}) interface{} {
	return v
}
func expandComputeInstanceNetworkInterfacesNetworkIP(v interface{}) interface{} {
	return v
}
func expandComputeInstanceNetworkInterfacesSubnetwork(v interface{}) interface{} {
	return v
}

func expandComputeInstanceScheduling(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["automaticRestart"] =
			expandComputeInstanceSchedulingAutomaticRestart(original["automatic_restart"])
		transformed["onHostMaintenance"] =
			expandComputeInstanceSchedulingOnHostMaintenance(original["on_host_maintenance"])
		transformed["preemptible"] =
			expandComputeInstanceSchedulingPreemptible(original["preemptible"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceSchedulingAutomaticRestart(v interface{}) interface{} {
	return v
}
func expandComputeInstanceSchedulingOnHostMaintenance(v interface{}) interface{} {
	return v
}
func expandComputeInstanceSchedulingPreemptible(v interface{}) interface{} {
	return v
}

func expandComputeInstanceServiceAccounts(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["email"] =
			expandComputeInstanceServiceAccountsEmail(original["email"])
		transformed["scopes"] =
			expandComputeInstanceServiceAccountsScopes(original["scopes"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceServiceAccountsEmail(v interface{}) interface{} {
	return v
}
func expandComputeInstanceServiceAccountsScopes(v interface{}) interface{} {
	return v
}

func expandComputeInstanceTags(v interface{}) interface{} {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformed["fingerprint"] =
			expandComputeInstanceTagsFingerprint(original["fingerprint"])
		transformed["items"] =
			expandComputeInstanceTagsItems(original["items"])

		req = append(req, transformed)
	}
	return req
}
func expandComputeInstanceTagsFingerprint(v interface{}) interface{} {
	return v
}
func expandComputeInstanceTagsItems(v interface{}) interface{} {
	return v
}

func expandComputeInstanceZone(v interface{}) interface{} {
	return v
}
