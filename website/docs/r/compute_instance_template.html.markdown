<!---
 ----------------------------------------------------------------------------

     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***

 ----------------------------------------------------------------------------

     This file is automatically generated and manual changes will be
     clobbered when the file is regenerated.

     Please read more about how to change this file in
     .github/CONTRIBUTING.md.

 ----------------------------------------------------------------------------
--->
---
layout: "google"
page_title: "Google: google_compute_instance_template"
sidebar_current: "docs-google-compute-instance-template"
description: |-
  Defines an Instance Template resource that provides configuration settings
---

# google\_compute\_instance\_template

Defines an Instance Template resource that provides configuration settings
for your virtual machine instances. Instance templates are not tied to the
lifetime of an instance and can be used and reused as to deploy virtual
machines. You can also use different templates to create different virtual
machine configurations. Instance templates are required when you create a
managed instance group.

Tip: Disks should be set to autoDelete=true
so that leftover disks are not left behind on machine deletion.


## Example Usage

```hcl
resource "google_compute_instance_template" "default" {
  TODO: Add fields
}
```

## Argument Reference

The following arguments are supported:

* `name` -
  (Required)
  Name of the resource. The name is 1-63 characters long
and complies with RFC1035.



- - -

* `description` -
  (Optional)
  An optional description of this resource. Provide this property when
you create the resource.
* `properties` -
  (Optional)
  The instance properties for this instance template.
  Structure is documented below.
* `project` (Optional) The project in which the resource belongs.
    If it is not provided, the provider project is used.


The `properties` block supports:
* `can_ip_forward` -
  (Optional)
  Enables instances created based on this template to send packets
with source IP addresses other than their own and receive packets
with destination IP addresses other than their own. If these
instances will be used as an IP gateway or it will be set as the
next-hop in a Route resource, specify true. If unsure, leave this
set to false.
* `description` -
  (Optional)
  An optional text description for the instances that are created
from this instance template.
* `disks` -
  (Optional)
  An array of disks that are associated with the instances that are
created from this template.
  Structure is documented below.
* `machine_type` -
  (Required)
  A reference to MachineType resource
* `metadata` -
  (Optional)
  The metadata key/value pairs to assign to instances that are
created from this template. These pairs can consist of custom
metadata or predefined keys.
* `guest_accelerators` -
  (Optional)
  List of the type and count of accelerator cards attached to the
instance
  Structure is documented below.
* `network_interfaces` -
  (Optional)
  An array of configurations for this interface. This specifies
how this interface is configured to interact with other
network services, such as connecting to the internet. Only
one network interface is supported per instance.
  Structure is documented below.
* `scheduling` -
  (Optional)
  Sets the scheduling options for this instance.
  Structure is documented below.
* `service_accounts` -
  (Optional)
  A list of service accounts, with their specified scopes, authorized
for this instance. Only one service account per VM instance is
supported.
  Structure is documented below.
* `tags` -
  (Optional)
  A list of tags to apply to this instance. Tags are used to identify
valid sources or targets for network firewalls and are specified by
the client during instance creation. The tags can be later modified
by the setTags method. Each tag within the list must comply with
RFC1035.
  Structure is documented below.
  
  
  The `disks` block supports:
* `auto_delete` -
  (Optional)
  Specifies whether the disk will be auto-deleted when the
instance is deleted (but not when the disk is detached from
the instance).

Tip: Disks should be set to autoDelete=true
so that leftover disks are not left behind on machine
deletion.
* `boot` -
  (Optional)
  Indicates that this is a boot disk. The virtual machine will
use the first partition of the disk for its root filesystem.
* `device_name` -
  (Optional)
  Specifies a unique device name of your choice that is
reflected into the /dev/disk/by-id/google-* tree of a Linux
operating system running within the instance. This name can
be used to reference the device for mounting, resizing, and
so on, from within the instance.
* `disk_encryption_key` -
  (Optional)
  Encrypts or decrypts a disk using a customer-supplied
encryption key.
  Structure is documented below.
* `index` -
  (Optional)
  Assigns a zero-based index to this disk, where 0 is
reserved for the boot disk. For example, if you have many
disks attached to an instance, each disk would have a
unique index number. If not specified, the server will
choose an appropriate value.
* `initialize_params` -
  (Required)
  Specifies the parameters for a new disk that will be
created alongside the new instance. Use initialization
parameters to create boot disks or local SSDs attached to
the new instance.
  Structure is documented below.
* `interface` -
  (Optional)
  Specifies the disk interface to use for attaching this
disk, which is either SCSI or NVME. The default is SCSI.
Persistent disks must always use SCSI and the request will
fail if you attempt to attach a persistent disk in any
other format than SCSI.
* `mode` -
  (Optional)
  The mode in which to attach this disk, either READ_WRITE or
READ_ONLY. If not specified, the default is to attach the
disk in READ_WRITE mode.
* `source` -
  (Optional)
  A reference to Disk resource
* `type` -
  (Optional)
  Specifies the type of the disk, either SCRATCH or
PERSISTENT. If not specified, the default is PERSISTENT.
  
  
  
  The `disk_encryption_key` block supports:
* `raw_key` -
  (Optional)
  Specifies a 256-bit customer-supplied encryption key,
encoded in RFC 4648 base64 to either encrypt or decrypt
this resource.
* `rsa_encrypted_key` -
  (Optional)
  Specifies an RFC 4648 base64 encoded, RSA-wrapped
2048-bit customer-supplied encryption key to either
encrypt or decrypt this resource.
* `sha256` -
  The RFC 4648 base64 encoded SHA-256 hash of the
customer-supplied encryption key that protects this
resource.
  
  
  
  
  The `initialize_params` block supports:
* `disk_name` -
  (Optional)
  Specifies the disk name. If not specified, the default
is to use the name of the instance.
* `disk_size_gb` -
  (Optional)
  Specifies the size of the disk in base-2 GB.
* `disk_type` -
  (Optional)
  A reference to DiskType resource
* `source_image` -
  (Optional)
  The source image to create this disk. When creating a
new instance, one of initializeParams.sourceImage or
disks.source is required.  To create a disk with one of
the public operating system images, specify the image
by its family name.
* `source_image_encryption_key` -
  (Optional)
  The customer-supplied encryption key of the source
image. Required if the source image is protected by a
customer-supplied encryption key.

Instance templates do not store customer-supplied
encryption keys, so you cannot create disks for
instances in a managed instance group if the source
images are encrypted with your own keys.
  Structure is documented below.
  
  
  
  
  The `source_image_encryption_key` block supports:
* `raw_key` -
  (Optional)
  Specifies a 256-bit customer-supplied encryption
key, encoded in RFC 4648 base64 to either encrypt
or decrypt this resource.
* `sha256` -
  The RFC 4648 base64 encoded SHA-256 hash of the
customer-supplied encryption key that protects this
resource.
  
  
  
  
  
  
  
  
  The `guest_accelerators` block supports:
* `accelerator_count` -
  (Optional)
  The number of the guest accelerator cards exposed to this
instance.
* `accelerator_type` -
  (Optional)
  Full or partial URL of the accelerator type resource to expose
to this instance.
  
  
  The `network_interfaces` block supports:
* `access_configs` -
  (Optional)
  An array of configurations for this interface. Currently, only
one access config, ONE_TO_ONE_NAT, is supported. If there are no
accessConfigs specified, then this instance will have no
external internet access.
  Structure is documented below.
* `alias_ip_ranges` -
  (Optional)
  An array of alias IP ranges for this network interface. Can
only be specified for network interfaces on subnet-mode
networks.
  Structure is documented below.
* `name` -
  The name of the network interface, generated by the
server. For network devices, these are eth0, eth1, etc
* `network` -
  (Optional)
  A reference to Network resource
* `network_ip` -
  (Optional)
  An IPv4 internal network address to assign to the
instance for this network interface. If not specified
by the user, an unused internal IP is assigned by the
system.
* `subnetwork` -
  (Optional)
  A reference to Subnetwork resource
  The `access_configs` block supports:
* `name` -
  (Required)
  The name of this access configuration. The
default and recommended name is External NAT but you can
use any arbitrary string you would like. For example, My
external IP or Network Access.
* `nat_ip` -
  (Required)
  A reference to Address resource
* `type` -
  (Required)
  The type of configuration. The default and only option is
ONE_TO_ONE_NAT.
  
  
  
  The `alias_ip_ranges` block supports:
* `ip_cidr_range` -
  (Optional)
  The IP CIDR range represented by this alias IP range.
This IP CIDR range must belong to the specified
subnetwork and cannot contain IP addresses reserved by
system or used by other network interfaces. This range
may be a single IP address (e.g. 10.2.3.4), a netmask
(e.g. /24) or a CIDR format string (e.g. 10.1.2.0/24).
* `subnetwork_range_name` -
  (Optional)
  Optional subnetwork secondary range name specifying
the secondary range from which to allocate the IP
CIDR range for this alias IP range. If left
unspecified, the primary range of the subnetwork will
be used.
  
  
  
  
  
  
  The `scheduling` block supports:
* `automatic_restart` -
  (Optional)
  Specifies whether the instance should be automatically restarted
if it is terminated by Compute Engine (not terminated by a user).
You can only set the automatic restart option for standard
instances. Preemptible instances cannot be automatically
restarted.
* `on_host_maintenance` -
  (Optional)
  Defines the maintenance behavior for this instance. For standard
instances, the default behavior is MIGRATE. For preemptible
instances, the default and only possible behavior is TERMINATE.
For more information, see Setting Instance Scheduling Options.
* `preemptible` -
  (Optional)
  Defines whether the instance is preemptible. This can only be set
during instance creation, it cannot be set or changed after the
instance has been created.
  
  
  
  The `service_accounts` block supports:
* `email` -
  (Optional)
  Email address of the service account.
* `scopes` -
  (Optional)
  The list of scopes to be made available for this service
account.
  
  
  The `tags` block supports:
* `fingerprint` -
  (Optional)
  Specifies a fingerprint for this request, which is essentially a
hash of the metadata's contents and used for optimistic locking.
The fingerprint is initially generated by Compute Engine and
changes after every request to modify or update metadata. You
must always provide an up-to-date fingerprint hash in order to
update or change metadata.
* `items` -
  (Optional)
  An array of tags. Each tag must be 1-63 characters long, and
comply with RFC1035.
  
  

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `creation_timestamp` -
  Creation timestamp in RFC3339 text format.
* `id` -
  The unique identifier for the resource. This identifier
is defined by the server.
* `self_link` - The URI of the created resource.




TODO: Add import section
