<!---
 ----------------------------------------------------------------------------

     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***

 ----------------------------------------------------------------------------

     This file is automatically generated by terraform-codegen and manual
     changes will be clobbered when the file is regenerated.

     Please read more about how to change this file in README.md and
     CONTRIBUTING.md located at the root of this package.

 ----------------------------------------------------------------------------
--->
---
layout: "google"
page_title: "Google: google_compute_subnetwork"
sidebar_current: "docs-google-compute-subnetwork"
description: |-
  A VPC network is a virtual version of the traditional physical networks
---

# google\_compute\_subnetwork

A VPC network is a virtual version of the traditional physical networks
that exist within and between physical data centers. A VPC network
provides connectivity for your Compute Engine virtual machine (VM)
instances, Container Engine containers, App Engine Flex services, and
other network-related resources.

Each GCP project contains one or more VPC networks. Each VPC network is a
global entity spanning all GCP regions. This global VPC network allows VM
instances and other resources to communicate with each other via internal,
private IP addresses.

Each VPC network is subdivided into subnets, and each subnet is contained
within a single region. You can have more than one subnet in a region for
a given VPC network. Each subnet has a contiguous private RFC1918 IP
space. You create instances, containers, and the like in these subnets.
When you create an instance, you must create it in a subnet, and the
instance draws its internal IP address from that subnet.

Virtual machine (VM) instances in a VPC network can communicate with
instances in all other subnets of the same VPC network, regardless of
region, using their RFC1918 private IP addresses. You can isolate portions
of the network, even entire subnets, using firewall rules.


## Example Usage

```hcl
resource "google_compute_subnetwork" "default" {
  TODO: Add fields
}
```

## Argument Reference

The following arguments are supported:

* `region` -
  (Required)
  A reference to Region resource



- - -

* `description` -
  (Optional)
  An optional description of this resource. Provide this property when
you create the resource. This field can be set only at resource
creation time.
* `gateway_address` -
  (Optional)
  The gateway address for default routes to reach destination addresses
outside this subnetwork. This field can be set only at resource
creation time.
* `ip_cidr_range` -
  (Optional)
  The range of internal addresses that are owned by this subnetwork.
Provide this property when you create the subnetwork. For example,
10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and
non-overlapping within a network. Only IPv4 is supported.
* `name` -
  (Optional)
  The name of the resource, provided by the client when initially
creating the resource. The name must be 1-63 characters long, and
comply with RFC1035. Specifically, the name must be 1-63 characters
long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which
means the first character must be a lowercase letter, and all
following characters must be a dash, lowercase letter, or digit,
except the last character, which cannot be a dash.
* `network` -
  (Optional)
  A reference to Network resource
* `private_ip_google_access` -
  (Optional)
  Whether the VMs in this subnet can access Google services without
assigned external IP addresses.
* `project` (Optional) The project in which the resource belongs.
    If it is not provided, the provider project is used.








## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `creation_timestamp` -
  Creation timestamp in RFC3339 text format.
* `self_link` - The URI of the created resource.



TODO: Add import section
