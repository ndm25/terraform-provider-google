<!---
 ----------------------------------------------------------------------------

     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***

 ----------------------------------------------------------------------------

     This file is automatically generated and manual changes will be
     clobbered when the file is regenerated.

     Please read more about how to change this file in
     .github/CONTRIBUTING.md.

 ----------------------------------------------------------------------------
--->
---
layout: "google"
page_title: "Google: google_compute_disk"
sidebar_current: "docs-google-compute-disk"
description: |-
  Persistent disks are durable storage devices that function similarly to
---

# google\_compute\_disk

Persistent disks are durable storage devices that function similarly to
the physical disks in a desktop or a server. Compute Engine manages the
hardware behind these devices to ensure data redundancy and optimize
performance for you. Persistent disks are available as either standard
hard disk drives (HDD) or solid-state drives (SSD).

Persistent disks are located independently from your virtual machine
instances, so you can detach or move persistent disks to keep your data
even after you delete your instances. Persistent disk performance scales
automatically with size, so you can resize your existing persistent disks
or add more persistent disks to an instance to meet your performance and
storage space requirements.

Add a persistent disk to your instance when you need reliable and
affordable storage with consistent performance characteristics.


## Example Usage

```hcl
resource "google_compute_disk" "default" {
  TODO: Add fields
}
```

## Argument Reference

The following arguments are supported:

* `zone` -
  (Required)
  A reference to Zone resource



- - -

* `description` -
  (Optional)
  An optional description of this resource. Provide this property when
you create the resource.
* `licenses` -
  (Optional)
  Any applicable publicly visible licenses.
* `name` -
  (Optional)
  Name of the resource. Provided by the client when the resource is
created. The name must be 1-63 characters long, and comply with
RFC1035. Specifically, the name must be 1-63 characters long and match
the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the
first character must be a lowercase letter, and all following
characters must be a dash, lowercase letter, or digit, except the last
character, which cannot be a dash.
* `size_gb` -
  (Optional)
  Size of the persistent disk, specified in GB. You can specify this
field when creating a persistent disk using the sourceImage or
sourceSnapshot parameter, or specify it alone to create an empty
persistent disk.

If you specify this field along with sourceImage or sourceSnapshot,
the value of sizeGb must not be less than the size of the sourceImage
or the size of the snapshot.
* `source_image` -
  (Optional)
  The source image used to create this disk. If the source image is
deleted, this field will not be set.

To create a disk with one of the public operating system images,
specify the image by its family name. For example, specify
family/debian-8 to use the latest Debian 8 image:

projects/debian-cloud/global/images/family/debian-8

Alternatively, use a specific version of a public operating system
image:

projects/debian-cloud/global/images/debian-8-jessie-vYYYYMMDD

To create a disk with a private image that you created, specify the
image name in the following format:

global/images/my-private-image

You can also specify a private image by its image family, which
returns the latest version of the image in that family. Replace the
image name with family/family-name:

global/images/family/my-private-family
* `disk_encryption_key` -
  (Optional)
  Encrypts the disk using a customer-supplied encryption key.

After you encrypt a disk with a customer-supplied key, you must
provide the same key if you use the disk later (e.g. to create a disk
snapshot or an image, or to attach the disk to a virtual machine).

Customer-supplied encryption keys do not protect access to metadata of
the disk.

If you do not provide an encryption key when creating the disk, then
the disk will be encrypted using an automatically generated key and
you do not need to provide a key to use the disk later.
  Structure is documented below.
* `source_image_encryption_key` -
  (Optional)
  The customer-supplied encryption key of the source image. Required if
the source image is protected by a customer-supplied encryption key.
  Structure is documented below.
* `source_snapshot` -
  (Optional)
  The source snapshot used to create this disk. You can provide this as
a partial or full URL to the resource. For example, the following are
valid values:

* https://www.googleapis.com/compute/v1/projects/project/global/
      snapshots/snapshot
* projects/project/global/snapshots/snapshot
* global/snapshots/snapshot
* `source_snapshot_encryption_key` -
  (Optional)
  The customer-supplied encryption key of the source snapshot. Required
if the source snapshot is protected by a customer-supplied encryption
key.
  Structure is documented below.
* `project` (Optional) The project in which the resource belongs.
    If it is not provided, the provider project is used.






The `disk_encryption_key` block supports:
* `raw_key` -
  (Optional)
  Specifies a 256-bit customer-supplied encryption key, encoded in
RFC 4648 base64 to either encrypt or decrypt this resource.
* `sha256` -
  The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
encryption key that protects this resource.
  
  
The `source_image_encryption_key` block supports:
* `raw_key` -
  (Optional)
  Specifies a 256-bit customer-supplied encryption key, encoded in
RFC 4648 base64 to either encrypt or decrypt this resource.
* `sha256` -
  The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
encryption key that protects this resource.
  
  

The `source_snapshot_encryption_key` block supports:
* `raw_key` -
  (Optional)
  Specifies a 256-bit customer-supplied encryption key, encoded in
RFC 4648 base64 to either encrypt or decrypt this resource.
* `sha256` -
  The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
encryption key that protects this resource.
  
  

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `creation_timestamp` -
  Creation timestamp in RFC3339 text format.
* `id` -
  The unique identifier for the resource.
* `last_attach_timestamp` -
  Last attach timestamp in RFC3339 text format.
* `last_detach_timestamp` -
  Last dettach timestamp in RFC3339 text format.
* `type` -
  URL of the disk type resource describing which disk type to use to
create the disk. Provide this when creating the disk.
* `users` -
  Links to the users of the disk (attached instances) in form:
project/zones/zone/instances/instance
* `source_image_id` -
  The ID value of the image used to create this disk. This value
identifies the exact image that was used to create this persistent
disk. For example, if you created the persistent disk from an image
that was later deleted and recreated under the same name, the source
image ID would identify the exact version of the image that was used.
* `source_snapshot_id` -
  The unique ID of the snapshot used to create this disk. This value
identifies the exact snapshot that was used to create this persistent
disk. For example, if you created the persistent disk from a snapshot
that was later deleted and recreated under the same name, the source
snapshot ID would identify the exact version of the snapshot that was
used.
* `self_link` - The URI of the created resource.










TODO: Add import section
